
MRM1PV302.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ac  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000004  08007b1c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000056c  20000010  08007b28  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000057c  08007b28  0002057c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001df77  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003416  00000000  00000000  0003dfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002000  00000000  00000000  000413d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ed8  00000000  00000000  000433d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002400b  00000000  00000000  000452a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cfb8  00000000  00000000  000692b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e7bec  00000000  00000000  0008626b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0016de57  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000089b0  00000000  00000000  0016deac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080079d0 	.word	0x080079d0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080079d0 	.word	0x080079d0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000498:	68fb      	ldr	r3, [r7, #12]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 f8aa 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f818 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fb9a 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 fb56 	bl	8000b98 <MX_DMA_Init>
  MX_ADC1_Init();
 80004ec:	f000 f8c0 	bl	8000670 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80004f0:	f000 fa4a 	bl	8000988 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 fa96 	bl	8000a24 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80004f8:	f000 fb10 	bl	8000b1c <MX_SPI1_Init>
  MX_AES1_Init();
 80004fc:	f000 f9ce 	bl	800089c <MX_AES1_Init>
  MX_PKA_Init();
 8000500:	f000 fadc 	bl	8000abc <MX_PKA_Init>
  MX_RNG_Init();
 8000504:	f000 faf6 	bl	8000af4 <MX_RNG_Init>
  MX_RF_Init();
 8000508:	f000 faec 	bl	8000ae4 <MX_RF_Init>
  MX_I2C1_Init();
 800050c:	f000 f9fc 	bl	8000908 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x38>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800051e:	2248      	movs	r2, #72	; 0x48
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f007 fa4c 	bl	80079c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
 8000538:	615a      	str	r2, [r3, #20]
 800053a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2250      	movs	r2, #80	; 0x50
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f007 fa3c 	bl	80079c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b48      	ldr	r3, [pc, #288]	; (800066c <SystemClock_Config+0x158>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000550:	4a46      	ldr	r2, [pc, #280]	; (800066c <SystemClock_Config+0x158>)
 8000552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b44      	ldr	r3, [pc, #272]	; (800066c <SystemClock_Config+0x158>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000564:	232b      	movs	r3, #43	; 0x2b
 8000566:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000572:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2340      	movs	r3, #64	; 0x40
 800057c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000586:	2360      	movs	r3, #96	; 0x60
 8000588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800058c:	2305      	movs	r3, #5
 800058e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000598:	2301      	movs	r3, #1
 800059a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005a4:	2320      	movs	r3, #32
 80005a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fe1a 	bl	8005200 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d2:	f000 fb89 	bl	8000ce8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005d6:	236f      	movs	r3, #111	; 0x6f
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f6:	2103      	movs	r1, #3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 f98d 	bl	8005918 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000604:	f000 fb70 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8000608:	f243 6307 	movw	r3, #13831	; 0x3607
 800060c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RNG
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800060e:	2318      	movs	r3, #24
 8000610:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800061c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800061e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000622:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8000624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000628:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000632:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSI;
 8000638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800063e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000644:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800064a:	2300      	movs	r3, #0
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800064e:	2310      	movs	r3, #16
 8000650:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fda0 	bl	800619a <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000660:	f000 fb42 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000664:	bf00      	nop
 8000666:	37b8      	adds	r7, #184	; 0xb8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	58000400 	.word	0x58000400

08000670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	; 0x68
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2234      	movs	r2, #52	; 0x34
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f007 f98d 	bl	80079c0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a6:	4b72      	ldr	r3, [pc, #456]	; (8000870 <MX_ADC1_Init+0x200>)
 80006a8:	4a72      	ldr	r2, [pc, #456]	; (8000874 <MX_ADC1_Init+0x204>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ac:	4b70      	ldr	r3, [pc, #448]	; (8000870 <MX_ADC1_Init+0x200>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b2:	4b6f      	ldr	r3, [pc, #444]	; (8000870 <MX_ADC1_Init+0x200>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	4b6d      	ldr	r3, [pc, #436]	; (8000870 <MX_ADC1_Init+0x200>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006be:	4b6c      	ldr	r3, [pc, #432]	; (8000870 <MX_ADC1_Init+0x200>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c4:	4b6a      	ldr	r3, [pc, #424]	; (8000870 <MX_ADC1_Init+0x200>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ca:	4b69      	ldr	r3, [pc, #420]	; (8000870 <MX_ADC1_Init+0x200>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b67      	ldr	r3, [pc, #412]	; (8000870 <MX_ADC1_Init+0x200>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <MX_ADC1_Init+0x200>)
 80006d8:	2203      	movs	r2, #3
 80006da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b64      	ldr	r3, [pc, #400]	; (8000870 <MX_ADC1_Init+0x200>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b62      	ldr	r3, [pc, #392]	; (8000870 <MX_ADC1_Init+0x200>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	4b61      	ldr	r3, [pc, #388]	; (8000870 <MX_ADC1_Init+0x200>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f0:	4b5f      	ldr	r3, [pc, #380]	; (8000870 <MX_ADC1_Init+0x200>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f8:	4b5d      	ldr	r3, [pc, #372]	; (8000870 <MX_ADC1_Init+0x200>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fe:	4b5c      	ldr	r3, [pc, #368]	; (8000870 <MX_ADC1_Init+0x200>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000706:	485a      	ldr	r0, [pc, #360]	; (8000870 <MX_ADC1_Init+0x200>)
 8000708:	f001 fb12 	bl	8001d30 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000712:	f000 fae9 	bl	8000ce8 <Error_Handler>
  }
  /** Disable Injected Queue
  */
  HAL_ADCEx_DisableInjectedQueue(&hadc1);
 8000716:	4856      	ldr	r0, [pc, #344]	; (8000870 <MX_ADC1_Init+0x200>)
 8000718:	f003 f9ec 	bl	8003af4 <HAL_ADCEx_DisableInjectedQueue>
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800071c:	4b56      	ldr	r3, [pc, #344]	; (8000878 <MX_ADC1_Init+0x208>)
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000720:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000724:	657b      	str	r3, [r7, #84]	; 0x54
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8000726:	4b55      	ldr	r3, [pc, #340]	; (800087c <MX_ADC1_Init+0x20c>)
 8000728:	65bb      	str	r3, [r7, #88]	; 0x58
  AnalogWDGConfig.ITMode = DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  AnalogWDGConfig.HighThreshold = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	663b      	str	r3, [r7, #96]	; 0x60
  AnalogWDGConfig.LowThreshold = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000738:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800073c:	4619      	mov	r1, r3
 800073e:	484c      	ldr	r0, [pc, #304]	; (8000870 <MX_ADC1_Init+0x200>)
 8000740:	f002 f9d8 	bl	8002af4 <HAL_ADC_AnalogWDGConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800074a:	f000 facd 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074e:	4b4b      	ldr	r3, [pc, #300]	; (800087c <MX_ADC1_Init+0x20c>)
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000752:	2306      	movs	r3, #6
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000756:	2300      	movs	r3, #0
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800075a:	4b49      	ldr	r3, [pc, #292]	; (8000880 <MX_ADC1_Init+0x210>)
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075e:	2304      	movs	r3, #4
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.Offset = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800076a:	4619      	mov	r1, r3
 800076c:	4840      	ldr	r0, [pc, #256]	; (8000870 <MX_ADC1_Init+0x200>)
 800076e:	f001 fdfd 	bl	800236c <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000778:	f000 fab6 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800077c:	4b41      	ldr	r3, [pc, #260]	; (8000884 <MX_ADC1_Init+0x214>)
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000780:	230c      	movs	r3, #12
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000788:	4619      	mov	r1, r3
 800078a:	4839      	ldr	r0, [pc, #228]	; (8000870 <MX_ADC1_Init+0x200>)
 800078c:	f001 fdee 	bl	800236c <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x12a>
  {
    Error_Handler();
 8000796:	f000 faa7 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <MX_ADC1_Init+0x218>)
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800079e:	2312      	movs	r3, #18
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a6:	4619      	mov	r1, r3
 80007a8:	4831      	ldr	r0, [pc, #196]	; (8000870 <MX_ADC1_Init+0x200>)
 80007aa:	f001 fddf 	bl	800236c <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 80007b4:	f000 fa98 	bl	8000ce8 <Error_Handler>
  }
  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_ADC1_Init+0x21c>)
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80007bc:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_ADC1_Init+0x214>)
 80007be:	65bb      	str	r3, [r7, #88]	; 0x58
  AnalogWDGConfig.ITMode = ENABLE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80007c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ca:	4619      	mov	r1, r3
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <MX_ADC1_Init+0x200>)
 80007ce:	f002 f991 	bl	8002af4 <HAL_ADC_AnalogWDGConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 80007d8:	f000 fa86 	bl	8000ce8 <Error_Handler>
  }
  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_3;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0x220>)
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_ADC1_Init+0x218>)
 80007e2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80007e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007e8:	4619      	mov	r1, r3
 80007ea:	4821      	ldr	r0, [pc, #132]	; (8000870 <MX_ADC1_Init+0x200>)
 80007ec:	f002 f982 	bl	8002af4 <HAL_ADC_AnalogWDGConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 80007f6:	f000 fa77 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_ADC1_Init+0x224>)
 80007fc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007fe:	2308      	movs	r3, #8
 8000800:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000806:	237f      	movs	r3, #127	; 0x7f
 8000808:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800080a:	2304      	movs	r3, #4
 800080c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_ADC1_Init+0x200>)
 800083c:	f002 fcac 	bl	8003198 <HAL_ADCEx_InjectedConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8000846:	f000 fa4f 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_ADC1_Init+0x228>)
 800084c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800084e:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_ADC1_Init+0x200>)
 800085a:	f002 fc9d 	bl	8003198 <HAL_ADCEx_InjectedConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 8000864:	f000 fa40 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3768      	adds	r7, #104	; 0x68
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000164 	.word	0x20000164
 8000874:	50040000 	.word	0x50040000
 8000878:	7dc00000 	.word	0x7dc00000
 800087c:	04300002 	.word	0x04300002
 8000880:	407f0000 	.word	0x407f0000
 8000884:	0c900008 	.word	0x0c900008
 8000888:	14f00020 	.word	0x14f00020
 800088c:	0017ffff 	.word	0x0017ffff
 8000890:	0027ffff 	.word	0x0027ffff
 8000894:	1d500080 	.word	0x1d500080
 8000898:	21800100 	.word	0x21800100

0800089c <MX_AES1_Init>:
  * @brief AES1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END AES1_Init 0 */

  /* USER CODE BEGIN AES1_Init 1 */

  /* USER CODE END AES1_Init 1 */
  hcryp1.Instance = AES1;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_AES1_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_AES1_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  hcryp1.Init.DataType = CRYP_DATATYPE_32B;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_AES1_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hcryp1.Init.KeySize = CRYP_KEYSIZE_128B;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_AES1_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hcryp1.Init.pKey = (uint32_t *)pKeyAES1;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_AES1_Init+0x58>)
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <MX_AES1_Init+0x60>)
 80008b6:	60da      	str	r2, [r3, #12]
  hcryp1.Init.Algorithm = CRYP_AES_CCM;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_AES1_Init+0x58>)
 80008ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008be:	615a      	str	r2, [r3, #20]
  hcryp1.Init.Header = (uint32_t *)HeaderAES1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_AES1_Init+0x58>)
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <MX_AES1_Init+0x64>)
 80008c4:	619a      	str	r2, [r3, #24]
  hcryp1.Init.HeaderSize = 4;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_AES1_Init+0x58>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	61da      	str	r2, [r3, #28]
  hcryp1.Init.B0 = (uint32_t *)B0AES1;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_AES1_Init+0x58>)
 80008ce:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <MX_AES1_Init+0x68>)
 80008d0:	621a      	str	r2, [r3, #32]
  hcryp1.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_AES1_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp1.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_AES1_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_AES1_Init+0x58>)
 80008e0:	f003 fa3f 	bl	8003d62 <HAL_CRYP_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_AES1_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f9fd 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN AES1_Init 2 */

  /* USER CODE END AES1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000314 	.word	0x20000314
 80008f8:	50060000 	.word	0x50060000
 80008fc:	08007a24 	.word	0x08007a24
 8000900:	08007a34 	.word	0x08007a34
 8000904:	08007a44 	.word	0x08007a44

08000908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_I2C1_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_I2C1_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_I2C1_Init+0x74>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <MX_I2C1_Init+0x7c>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_I2C1_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_I2C1_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_I2C1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_I2C1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_I2C1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_I2C1_Init+0x74>)
 8000944:	f003 fdea 	bl	800451c <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 f9cb 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_I2C1_Init+0x74>)
 8000956:	f003 fe70 	bl	800463a <HAL_I2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 f9c2 	bl	8000ce8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_I2C1_Init+0x74>)
 8000968:	f003 feb2 	bl	80046d0 <HAL_I2CEx_ConfigDigitalFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 f9b9 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000002c 	.word	0x2000002c
 8000980:	40005400 	.word	0x40005400
 8000984:	10707dbc 	.word	0x10707dbc

08000988 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 800098e:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <MX_LPUART1_UART_Init+0x94>)
 8000990:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 8000994:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <MX_LPUART1_UART_Init+0x98>)
 8000996:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009ac:	220c      	movs	r2, #12
 80009ae:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009d0:	f006 f8ed 	bl	8006bae <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80009da:	f000 f985 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	2100      	movs	r1, #0
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009e2:	f006 fee5 	bl	80077b0 <HAL_UARTEx_SetTxFifoThreshold>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009ec:	f000 f97c 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 80009f4:	f006 ff1a 	bl	800782c <HAL_UARTEx_SetRxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009fe:	f000 f973 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_LPUART1_UART_Init+0x90>)
 8000a04:	f006 fe9b 	bl	800773e <HAL_UARTEx_DisableFifoMode>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000a0e:	f000 f96b 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000078 	.word	0x20000078
 8000a1c:	40008000 	.word	0x40008000
 8000a20:	00033324 	.word	0x00033324

08000a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART1_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f006 f89e 	bl	8006bae <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f936 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a80:	f006 fe96 	bl	80077b0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f92d 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f006 fecb 	bl	800782c <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f924 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f006 fe4c 	bl	800773e <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f91c 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000228 	.word	0x20000228
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_PKA_Init+0x20>)
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <MX_PKA_Init+0x24>)
 8000ac4:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_PKA_Init+0x20>)
 8000ac8:	f003 fe4e 	bl	8004768 <HAL_PKA_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8000ad2:	f000 f909 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000448 	.word	0x20000448
 8000ae0:	58002000 	.word	0x58002000

08000ae4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_RNG_Init+0x20>)
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <MX_RNG_Init+0x24>)
 8000afc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_RNG_Init+0x20>)
 8000b00:	f005 fdd2 	bl	80066a8 <HAL_RNG_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000b0a:	f000 f8ed 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000434 	.word	0x20000434
 8000b18:	58001000 	.word	0x58001000

08000b1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_SPI1_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b6a:	2207      	movs	r2, #7
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b76:	2208      	movs	r2, #8
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_SPI1_Init+0x74>)
 8000b7c:	f005 fe34 	bl	80067e8 <HAL_SPI_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f8af 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000454 	.word	0x20000454
 8000b94:	40013000 	.word	0x40013000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b9c:	2004      	movs	r0, #4
 8000b9e:	f7ff fc69 	bl	8000474 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff fc66 	bl	8000474 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	200b      	movs	r0, #11
 8000bae:	f003 f8a4 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bb2:	200b      	movs	r0, #11
 8000bb4:	f003 f8bb 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	200c      	movs	r0, #12
 8000bbe:	f003 f89c 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f003 f8b3 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	200d      	movs	r0, #13
 8000bce:	f003 f894 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	f003 f8ab 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	200e      	movs	r0, #14
 8000bde:	f003 f88c 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000be2:	200e      	movs	r0, #14
 8000be4:	f003 f8a3 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	200f      	movs	r0, #15
 8000bee:	f003 f884 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f003 f89b 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2010      	movs	r0, #16
 8000bfe:	f003 f87c 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c02:	2010      	movs	r0, #16
 8000c04:	f003 f893 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2011      	movs	r0, #17
 8000c0e:	f003 f874 	bl	8003cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c12:	2011      	movs	r0, #17
 8000c14:	f003 f88b 	bl	8003d2e <HAL_NVIC_EnableIRQ>

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fc38 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	2004      	movs	r0, #4
 8000c38:	f7ff fc35 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fc32 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	2008      	movs	r0, #8
 8000c44:	f7ff fc2f 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USEBAT_GPIO_Port, USEBAT_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f003 fc4b 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_EOC_GPIO_Port, ADC_EOC_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	4820      	ldr	r0, [pc, #128]	; (8000ce0 <MX_GPIO_Init+0xc4>)
 8000c5e:	f003 fc45 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CATM1PWR_Pin|SPI1_CS_N_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2103      	movs	r1, #3
 8000c66:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <MX_GPIO_Init+0xc8>)
 8000c68:	f003 fc40 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USEBAT_Pin */
  GPIO_InitStruct.Pin = USEBAT_Pin;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(USEBAT_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f003 fac1 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWSTAT_Pin ADC_TRIG_Pin */
  GPIO_InitStruct.Pin = PWSTAT_Pin|ADC_TRIG_Pin;
 8000c8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <MX_GPIO_Init+0xc4>)
 8000c9e:	f003 fab5 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_EOC_Pin */
  GPIO_InitStruct.Pin = ADC_EOC_Pin;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADC_EOC_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <MX_GPIO_Init+0xc4>)
 8000cba:	f003 faa7 	bl	800420c <HAL_GPIO_Init>

  /*Configure GPIO pins : CATM1PWR_Pin SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = CATM1PWR_Pin|SPI1_CS_N_Pin;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_GPIO_Init+0xc8>)
 8000cd4:	f003 fa9a 	bl	800420c <HAL_GPIO_Init>

}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000c00 	.word	0x48000c00

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>

08000cf2 <LL_AHB2_GRP1_EnableClock>:
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4013      	ands	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d48:	68fb      	ldr	r3, [r7, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dac:	68fb      	ldr	r3, [r7, #12]
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 fe25 	bl	8004a54 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000e0a:	f003 fe65 	bl	8004ad8 <HAL_PWR_EnablePVD>
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 fc96 	bl	8001740 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000e14:	f000 fcd4 	bl	80017c0 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 fcb1 	bl	8001780 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_ADC_MspInit+0xd8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d155      	bne.n	8000ef6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e4e:	f7ff ff50 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2004      	movs	r0, #4
 8000e54:	f7ff ff4d 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff ff4a 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = VAP_Pin|VAN_Pin|IGP_Pin|IGN_Pin;
 8000e5e:	230f      	movs	r3, #15
 8000e60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4824      	ldr	r0, [pc, #144]	; (8000f04 <HAL_ADC_MspInit+0xdc>)
 8000e72:	f003 f9cb 	bl	800420c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IP_Pin|IN_Pin|Temp_Pin|BAT_Pin;
 8000e76:	230f      	movs	r3, #15
 8000e78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f003 f9be 	bl	800420c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel7;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000e92:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_ADC_MspInit+0xe4>)
 8000e94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000e98:	2205      	movs	r2, #5
 8000e9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000ecc:	f002 ff84 	bl	8003dd8 <HAL_DMA_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000ed6:	f7ff ff07 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000ede:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <HAL_ADC_MspInit+0xe0>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2012      	movs	r0, #18
 8000eec:	f002 ff05 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ef0:	2012      	movs	r0, #18
 8000ef2:	f002 ff1c 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3720      	adds	r7, #32
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	50040000 	.word	0x50040000
 8000f04:	48000800 	.word	0x48000800
 8000f08:	200002b4 	.word	0x200002b4
 8000f0c:	40020080 	.word	0x40020080

08000f10 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_CRYP_MspInit+0x24>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d103      	bne.n	8000f2a <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES1_MspInit 0 */

  /* USER CODE END AES1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES1_CLK_ENABLE();
 8000f22:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f26:	f7ff fee4 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN AES1_MspInit 1 */

  /* USER CODE END AES1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	50060000 	.word	0x50060000

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_I2C_MspInit+0x5c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d117      	bne.n	8000f8a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fec9 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f66:	2312      	movs	r3, #18
 8000f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f72:	2304      	movs	r3, #4
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_I2C_MspInit+0x60>)
 8000f7e:	f003 f945 	bl	800420c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f82:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f86:	f7ff fee6 	bl	8000d56 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40005400 	.word	0x40005400
 8000f98:	48000400 	.word	0x48000400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a77      	ldr	r2, [pc, #476]	; (8001198 <HAL_UART_MspInit+0x1fc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d171      	bne.n	80010a2 <HAL_UART_MspInit+0x106>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff fee2 	bl	8000d88 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f7ff fe94 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	486d      	ldr	r0, [pc, #436]	; (800119c <HAL_UART_MspInit+0x200>)
 8000fe8:	f003 f910 	bl	800420c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000fec:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8000fee:	4a6d      	ldr	r2, [pc, #436]	; (80011a4 <HAL_UART_MspInit+0x208>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000ff2:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff8:	4b69      	ldr	r3, [pc, #420]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001004:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100a:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <HAL_UART_MspInit+0x204>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001010:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800101c:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <HAL_UART_MspInit+0x204>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001022:	485f      	ldr	r0, [pc, #380]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8001024:	f002 fed8 	bl	8003dd8 <HAL_DMA_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 800102e:	f7ff fe5b 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a5a      	ldr	r2, [pc, #360]	; (80011a0 <HAL_UART_MspInit+0x204>)
 8001036:	679a      	str	r2, [r3, #120]	; 0x78
 8001038:	4a59      	ldr	r2, [pc, #356]	; (80011a0 <HAL_UART_MspInit+0x204>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800103e:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001040:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <HAL_UART_MspInit+0x210>)
 8001042:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001046:	2211      	movs	r2, #17
 8001048:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800104a:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 800104c:	2210      	movs	r2, #16
 800104e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001050:	4b55      	ldr	r3, [pc, #340]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001056:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105c:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001068:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800106e:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001074:	484c      	ldr	r0, [pc, #304]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001076:	f002 feaf 	bl	8003dd8 <HAL_DMA_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001080:	f7ff fe32 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 8001088:	675a      	str	r2, [r3, #116]	; 0x74
 800108a:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_UART_MspInit+0x20c>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2025      	movs	r0, #37	; 0x25
 8001096:	f002 fe30 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800109a:	2025      	movs	r0, #37	; 0x25
 800109c:	f002 fe47 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010a0:	e075      	b.n	800118e <HAL_UART_MspInit+0x1f2>
  else if(huart->Instance==USART1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a42      	ldr	r2, [pc, #264]	; (80011b0 <HAL_UART_MspInit+0x214>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d170      	bne.n	800118e <HAL_UART_MspInit+0x1f2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010b0:	f7ff fe83 	bl	8000dba <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	2002      	movs	r0, #2
 80010b6:	f7ff fe1c 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ba:	23c0      	movs	r3, #192	; 0xc0
 80010bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ca:	2307      	movs	r3, #7
 80010cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	4619      	mov	r1, r3
 80010d4:	4831      	ldr	r0, [pc, #196]	; (800119c <HAL_UART_MspInit+0x200>)
 80010d6:	f003 f899 	bl	800420c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_UART_MspInit+0x218>)
 80010dc:	4a36      	ldr	r2, [pc, #216]	; (80011b8 <HAL_UART_MspInit+0x21c>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_UART_MspInit+0x218>)
 80010e2:	220e      	movs	r2, #14
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_UART_MspInit+0x218>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <HAL_UART_MspInit+0x218>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <HAL_UART_MspInit+0x218>)
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f8:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <HAL_UART_MspInit+0x218>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_UART_MspInit+0x218>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_UART_MspInit+0x218>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_UART_MspInit+0x218>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001110:	4828      	ldr	r0, [pc, #160]	; (80011b4 <HAL_UART_MspInit+0x218>)
 8001112:	f002 fe61 	bl	8003dd8 <HAL_DMA_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x184>
      Error_Handler();
 800111c:	f7ff fde4 	bl	8000ce8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <HAL_UART_MspInit+0x218>)
 8001124:	679a      	str	r2, [r3, #120]	; 0x78
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <HAL_UART_MspInit+0x218>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_UART_MspInit+0x220>)
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_UART_MspInit+0x224>)
 8001130:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001134:	220f      	movs	r2, #15
 8001136:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_UART_MspInit+0x220>)
 800113a:	2210      	movs	r2, #16
 800113c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_UART_MspInit+0x220>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x220>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001162:	4816      	ldr	r0, [pc, #88]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001164:	f002 fe38 	bl	8003dd8 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_UART_MspInit+0x1d6>
      Error_Handler();
 800116e:	f7ff fdbb 	bl	8000ce8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x220>)
 8001176:	675a      	str	r2, [r3, #116]	; 0x74
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_UART_MspInit+0x220>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2024      	movs	r0, #36	; 0x24
 8001184:	f002 fdb9 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001188:	2024      	movs	r0, #36	; 0x24
 800118a:	f002 fdd0 	bl	8003d2e <HAL_NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40008000 	.word	0x40008000
 800119c:	48000400 	.word	0x48000400
 80011a0:	200003d4 	.word	0x200003d4
 80011a4:	40020008 	.word	0x40020008
 80011a8:	20000374 	.word	0x20000374
 80011ac:	4002001c 	.word	0x4002001c
 80011b0:	40013800 	.word	0x40013800
 80011b4:	200001c8 	.word	0x200001c8
 80011b8:	40020030 	.word	0x40020030
 80011bc:	20000104 	.word	0x20000104
 80011c0:	40020044 	.word	0x40020044

080011c4 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_PKA_MspInit+0x34>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10b      	bne.n	80011ee <HAL_PKA_MspInit+0x2a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 80011d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80011da:	f7ff fda3 	bl	8000d24 <LL_AHB3_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	201d      	movs	r0, #29
 80011e4:	f002 fd89 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
 80011e8:	201d      	movs	r0, #29
 80011ea:	f002 fda0 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	58002000 	.word	0x58002000

080011fc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_RNG_MspInit+0x34>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10b      	bne.n	8001226 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800120e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001212:	f7ff fd87 	bl	8000d24 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2035      	movs	r0, #53	; 0x35
 800121c:	f002 fd6d 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001220:	2035      	movs	r0, #53	; 0x35
 8001222:	f002 fd84 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	58001000 	.word	0x58001000

08001234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a3b      	ldr	r2, [pc, #236]	; (8001340 <HAL_SPI_MspInit+0x10c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d170      	bne.n	8001338 <HAL_SPI_MspInit+0x104>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001256:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800125a:	f7ff fdae 	bl	8000dba <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2002      	movs	r0, #2
 8001260:	f7ff fd47 	bl	8000cf2 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001264:	2338      	movs	r3, #56	; 0x38
 8001266:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001274:	2305      	movs	r3, #5
 8001276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4831      	ldr	r0, [pc, #196]	; (8001344 <HAL_SPI_MspInit+0x110>)
 8001280:	f002 ffc4 	bl	800420c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel5;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_SPI_MspInit+0x114>)
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_SPI_MspInit+0x118>)
 8001288:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_SPI_MspInit+0x114>)
 800128c:	2206      	movs	r2, #6
 800128e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_SPI_MspInit+0x114>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_SPI_MspInit+0x114>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_SPI_MspInit+0x114>)
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80012ba:	4823      	ldr	r0, [pc, #140]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012bc:	f002 fd8c 	bl	8003dd8 <HAL_DMA_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_SPI_MspInit+0x96>
    {
      Error_Handler();
 80012c6:	f7ff fd0f 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012ce:	659a      	str	r2, [r3, #88]	; 0x58
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_SPI_MspInit+0x114>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel6;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_SPI_MspInit+0x120>)
 80012da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012de:	2207      	movs	r2, #7
 80012e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012e4:	2210      	movs	r2, #16
 80012e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 800130e:	f002 fd63 	bl	8003dd8 <HAL_DMA_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_SPI_MspInit+0xe8>
    {
      Error_Handler();
 8001318:	f7ff fce6 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_SPI_MspInit+0x11c>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2022      	movs	r0, #34	; 0x22
 800132e:	f002 fce4 	bl	8003cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001332:	2022      	movs	r0, #34	; 0x22
 8001334:	f002 fcfb 	bl	8003d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000
 8001344:	48000400 	.word	0x48000400
 8001348:	200004b8 	.word	0x200004b8
 800134c:	40020058 	.word	0x40020058
 8001350:	20000518 	.word	0x20000518
 8001354:	4002006c 	.word	0x4002006c

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f9a0 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <DMA1_Channel1_IRQHandler+0x10>)
 80013b2:	f002 fe18 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200003d4 	.word	0x200003d4

080013c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Channel2_IRQHandler+0x10>)
 80013c6:	f002 fe0e 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000374 	.word	0x20000374

080013d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Channel3_IRQHandler+0x10>)
 80013da:	f002 fe04 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001c8 	.word	0x200001c8

080013e8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Channel4_IRQHandler+0x10>)
 80013ee:	f002 fdfa 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000104 	.word	0x20000104

080013fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA1_Channel5_IRQHandler+0x10>)
 8001402:	f002 fdf0 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200004b8 	.word	0x200004b8

08001410 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <DMA1_Channel6_IRQHandler+0x10>)
 8001416:	f002 fde6 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000518 	.word	0x20000518

08001424 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA1_Channel7_IRQHandler+0x10>)
 800142a:	f002 fddc 	bl	8003fe6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200002b4 	.word	0x200002b4

08001438 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <ADC1_IRQHandler+0x10>)
 800143e:	f000 fdc1 	bl	8001fc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000164 	.word	0x20000164

0800144c <PKA_IRQHandler>:

/**
  * @brief This function handles PKA interrupt.
  */
void PKA_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <PKA_IRQHandler+0x10>)
 8001452:	f003 f9b7 	bl	80047c4 <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000448 	.word	0x20000448

08001460 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <SPI1_IRQHandler+0x10>)
 8001466:	f005 fa63 	bl	8006930 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000454 	.word	0x20000454

08001474 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <USART1_IRQHandler+0x10>)
 800147a:	f005 fbe9 	bl	8006c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000228 	.word	0x20000228

08001488 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <LPUART1_IRQHandler+0x10>)
 800148e:	f005 fbdf 	bl	8006c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000078 	.word	0x20000078

0800149c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <RNG_IRQHandler+0x10>)
 80014a2:	f005 f936 	bl	8006712 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000434 	.word	0x20000434

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <SystemInit+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <SystemInit+0xa0>)
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <SystemInit+0xa0>)
 80014c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014e2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <SystemInit+0xa4>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001500:	f023 0305 	bic.w	r3, r3, #5
 8001504:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <SystemInit+0xa8>)
 8001522:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <SystemInit+0xa8>)
 800152a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	faf6fefb 	.word	0xfaf6fefb
 8001558:	22041000 	.word	0x22041000

0800155c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800155c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001560:	3304      	adds	r3, #4

08001562 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001562:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001564:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001566:	d3f9      	bcc.n	800155c <CopyDataInit>
  bx lr
 8001568:	4770      	bx	lr

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800156a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800156c:	3004      	adds	r0, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800156e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>
  bx lr
 8001572:	4770      	bx	lr

08001574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001576:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001578:	f7ff ff9a 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <LoopForever+0x8>)
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <LoopForever+0xc>)
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <LoopForever+0x10>)
 8001582:	2300      	movs	r3, #0
 8001584:	f7ff ffed 	bl	8001562 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <LoopForever+0x14>)
 800158a:	490c      	ldr	r1, [pc, #48]	; (80015bc <LoopForever+0x18>)
 800158c:	2300      	movs	r3, #0
 800158e:	f7ff ffee 	bl	800156e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <LoopForever+0x1c>)
 8001594:	490b      	ldr	r1, [pc, #44]	; (80015c4 <LoopForever+0x20>)
 8001596:	2300      	movs	r3, #0
 8001598:	f7ff ffe9 	bl	800156e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800159c:	f006 f9ec 	bl	8007978 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015a0:	f7fe ff9a 	bl	80004d8 <main>

080015a4 <LoopForever>:

LoopForever:
  b LoopForever
 80015a4:	e7fe      	b.n	80015a4 <LoopForever>
 80015a6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80015a8:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000010 	.word	0x20000010
 80015b4:	08007b1c 	.word	0x08007b1c
  INIT_BSS _sbss, _ebss
 80015b8:	20000010 	.word	0x20000010
 80015bc:	2000057c 	.word	0x2000057c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015c0:	20030000 	.word	0x20030000
 80015c4:	20030000 	.word	0x20030000

080015c8 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <AES1_IRQHandler>
	...

080015cc <LL_VREFBUF_Enable>:
  * @brief  Enable Internal voltage reference
  * @rmtoll VREFBUF_CSR  ENVR          LL_VREFBUF_Enable
  * @retval None
  */
__STATIC_INLINE void LL_VREFBUF_Enable(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LL_VREFBUF_Enable+0x1c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <LL_VREFBUF_Enable+0x1c>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40010030 	.word	0x40010030

080015ec <LL_VREFBUF_SetVoltageScaling>:
  *         @arg @ref LL_VREFBUF_VOLTAGE_SCALE0
  *         @arg @ref LL_VREFBUF_VOLTAGE_SCALE1
  * @retval None
  */
__STATIC_INLINE void LL_VREFBUF_SetVoltageScaling(uint32_t Scale)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, Scale);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_VREFBUF_SetVoltageScaling+0x24>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 0204 	bic.w	r2, r3, #4
 80015fc:	4904      	ldr	r1, [pc, #16]	; (8001610 <LL_VREFBUF_SetVoltageScaling+0x24>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40010030 	.word	0x40010030

08001614 <LL_VREFBUF_SetTrimming>:
  * @rmtoll VREFBUF_CCR  TRIM          LL_VREFBUF_SetTrimming
  * @param  Value Between 0 and 0x3F
  * @retval None
  */
__STATIC_INLINE void LL_VREFBUF_SetTrimming(uint32_t Value)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  WRITE_REG(VREFBUF->CCR, Value);
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <LL_VREFBUF_SetTrimming+0x1c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6053      	str	r3, [r2, #4]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40010030 	.word	0x40010030

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_Init+0x3c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x3c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164a:	2003      	movs	r0, #3
 800164c:	f002 fb4a 	bl	8003ce4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f80f 	bl	8001674 <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	e001      	b.n	8001666 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001662:	f7ff fbc3 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001666:	79fb      	ldrb	r3, [r7, #7]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	58004000 	.word	0x58004000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_InitTick+0x6c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d024      	beq.n	80016d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001688:	f004 faf2 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_InitTick+0x6c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001698:	fbb3 f3f1 	udiv	r3, r3, r1
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fb52 	bl	8003d4a <HAL_SYSTICK_Config>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10f      	bne.n	80016cc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d809      	bhi.n	80016c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b2:	2200      	movs	r2, #0
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f04f 30ff 	mov.w	r0, #4294967295
 80016ba:	f002 fb1e 	bl	8003cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_InitTick+0x70>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e004      	b.n	80016d6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000000c 	.word	0x2000000c
 800170c:	20000578 	.word	0x20000578

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000578 	.word	0x20000578

08001728 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTickPrio+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000008 	.word	0x20000008

08001740 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  * @note   Retrieve the TrimmingValue from factory located at
  *         VREFBUF_SC0_CAL_ADDR or VREFBUF_SC1_CAL_ADDR addresses.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t TrimmingValue;

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));
  
  LL_VREFBUF_SetVoltageScaling(VoltageScaling);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff4f 	bl	80015ec <LL_VREFBUF_SetVoltageScaling>
  
  /* Restrieve Calibration data and store them into trimming field */
  if (VoltageScaling == SYSCFG_VREFBUF_VOLTAGE_SCALE0)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x20>
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC0_CAL_ADDR) & 0x3FU;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x38>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e004      	b.n	800176a <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x2a>
  }
  else
  {
    TrimmingValue = ((uint32_t) *VREFBUF_SC1_CAL_ADDR) & 0x3FU;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x3c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001768:	60fb      	str	r3, [r7, #12]
  }
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  HAL_SYSCFG_VREFBUF_TrimmingConfig(TrimmingValue);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f81c 	bl	80017a8 <HAL_SYSCFG_VREFBUF_TrimmingConfig>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	1fff75f0 	.word	0x1fff75f0
 800177c:	1fff7530 	.word	0x1fff7530

08001780 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg @ref SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE : VREF+ pin is internally connect to VREFINT output.
  *            @arg @ref SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE : VREF+ pin is high impedance.
  * @retval HAL_OK/HAL_TIMEOUT
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 0202 	bic.w	r2, r3, #2
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40010030 	.word	0x40010030

080017a8 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *          This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));
  
  LL_VREFBUF_SetTrimming(TrimmingValue);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff2f 	bl	8001614 <LL_VREFBUF_SetTrimming>

}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  
  LL_VREFBUF_Enable();
 80017c6:	f7ff ff01 	bl	80015cc <LL_VREFBUF_Enable>
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80017ca:	f7ff ffa1 	bl	8001710 <HAL_GetTick>
 80017ce:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_SYSCFG_EnableVREFBUF+0x24>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80017d2:	f7ff ff9d 	bl	8001710 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b0a      	cmp	r3, #10
 80017de:	d901      	bls.n	80017e4 <HAL_SYSCFG_EnableVREFBUF+0x24>
    {
      return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e006      	b.n	80017f2 <HAL_SYSCFG_EnableVREFBUF+0x32>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0U)
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_SYSCFG_EnableVREFBUF+0x3c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_SYSCFG_EnableVREFBUF+0x12>
    }
  }

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40010030 	.word	0x40010030

08001800 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
#endif
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3360      	adds	r3, #96	; 0x60
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <LL_ADC_SetOffset+0x44>)
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	4313      	orrs	r3, r2
 8001898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	03fff000 	.word	0x03fff000

080018b0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3360      	adds	r3, #96	; 0x60
 80018ec:	461a      	mov	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	431a      	orrs	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800192a:	2300      	movs	r3, #0
#endif
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3330      	adds	r3, #48	; 0x30
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	4413      	add	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	211f      	movs	r1, #31
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	0e9b      	lsrs	r3, r3, #26
 8001970:	f003 011f 	and.w	r1, r3, #31
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	431a      	orrs	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0303 	and.w	r3, r3, #3
#endif
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3314      	adds	r3, #20
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0e5b      	lsrs	r3, r3, #25
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0d1b      	lsrs	r3, r3, #20
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2107      	movs	r1, #7
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0318 	and.w	r3, r3, #24
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	400b      	ands	r3, r1
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	431a      	orrs	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0007ffff 	.word	0x0007ffff

08001a70 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (0) On STM32WB, parameter available only on analog watchdog number: AWD1.
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	330c      	adds	r3, #12
 8001a80:	4618      	mov	r0, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0d1b      	lsrs	r3, r3, #20
 8001a86:	f003 0103 	and.w	r1, r3, #3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0201 	and.w	r2, r3, #1
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8001aaa:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
#endif
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	603b      	str	r3, [r7, #0]

  MODIFY_REG(ADCx->TR1,
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
#else
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3320      	adds	r3, #32
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	0d1b      	lsrs	r3, r3, #20
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0419      	lsls	r1, r3, #16
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	430b      	orrs	r3, r1
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
#endif
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6093      	str	r3, [r2, #8]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b46:	d101      	bne.n	8001b4c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_IsEnabled+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_IsEnabled+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d101      	bne.n	8001be8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	601a      	str	r2, [r3, #0]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	605a      	str	r2, [r3, #4]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	605a      	str	r2, [r3, #4]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	605a      	str	r2, [r3, #4]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	605a      	str	r2, [r3, #4]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	605a      	str	r2, [r3, #4]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e12c      	b.n	8001fa8 <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff f863 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fedc 	bl	8001b32 <LL_ADC_IsDeepPowerDownEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fec2 	bl	8001b0e <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fef7 	bl	8001b82 <LL_ADC_IsInternalRegulatorEnabled>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d113      	bne.n	8001dc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fedb 	bl	8001b5a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_ADC_Init+0x280>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	4a82      	ldr	r2, [pc, #520]	; (8001fb4 <HAL_ADC_Init+0x284>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001db4:	e002      	b.n	8001dbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f9      	bne.n	8001db6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fedb 	bl	8001b82 <LL_ADC_IsInternalRegulatorEnabled>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f043 0210 	orr.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff feec 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8001df8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 80c7 	bne.w	8001f96 <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80c3 	bne.w	8001f96 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e18:	f043 0202 	orr.w	r2, r3, #2
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fec0 	bl	8001baa <LL_ADC_IsEnabled>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e30:	4861      	ldr	r0, [pc, #388]	; (8001fb8 <HAL_ADC_Init+0x288>)
 8001e32:	f7ff feba 	bl	8001baa <LL_ADC_IsEnabled>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4619      	mov	r1, r3
 8001e42:	485e      	ldr	r0, [pc, #376]	; (8001fbc <HAL_ADC_Init+0x28c>)
 8001e44:	f7ff fcdc 	bl	8001800 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e5b      	ldrb	r3, [r3, #25]
 8001e4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e66:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001e68:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	045b      	lsls	r3, r3, #17
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <HAL_ADC_Init+0x290>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe87 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8001ec2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe94 	bl	8001bf6 <LL_ADC_INJ_IsConversionOngoing>
 8001ece:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d13d      	bne.n	8001f52 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d13a      	bne.n	8001f52 <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ee0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ee8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	69b9      	ldr	r1, [r7, #24]
 8001f02:	430b      	orrs	r3, r1
 8001f04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d118      	bne.n	8001f42 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f2c:	4311      	orrs	r1, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f32:	430a      	orrs	r2, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	e007      	b.n	8001f52 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10c      	bne.n	8001f74 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f023 010f 	bic.w	r1, r3, #15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
 8001f72:	e007      	b.n	8001f84 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020f 	bic.w	r2, r2, #15
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f023 0303 	bic.w	r3, r3, #3
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	053e2d63 	.word	0x053e2d63
 8001fb8:	50040000 	.word	0x50040000
 8001fbc:	50040300 	.word	0x50040300
 8001fc0:	fff0c007 	.word	0xfff0c007

08001fc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d017      	beq.n	800201a <HAL_ADC_IRQHandler+0x56>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d012      	beq.n	800201a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f001 f8b8 	bl	8003182 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2202      	movs	r2, #2
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_ADC_IRQHandler+0x6a>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05d      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d058      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fc57 	bl	8001912 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03d      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if defined (ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002078:	d035      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x122>
#endif
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b08      	cmp	r3, #8
 8002086:	d12e      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fd9f 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11a      	bne.n	80020ce <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 020c 	bic.w	r2, r2, #12
 80020a6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d112      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
 80020cc:	e00b      	b.n	80020e6 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f922 	bl	8002330 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	220c      	movs	r2, #12
 80020f2:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_IRQHandler+0x144>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800210e:	2b00      	cmp	r3, #0
 8002110:	d074      	beq.n	80021fc <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d06f      	beq.n	80021fc <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fc37 	bl	80019ac <LL_ADC_INJ_IsTriggerSourceSWStart>
 800213e:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fbe4 	bl	8001912 <LL_ADC_REG_IsTriggerSourceSWStart>
 800214a:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d049      	beq.n	80021ee <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_ADC_IRQHandler+0x1b0>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d041      	beq.n	80021ee <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d13c      	bne.n	80021ee <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d135      	bne.n	80021ee <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d12e      	bne.n	80021ee <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fd2e 	bl	8001bf6 <LL_ADC_INJ_IsConversionOngoing>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11a      	bne.n	80021d6 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ae:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d112      	bne.n	80021ee <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
 80021d4:	e00b      	b.n	80021ee <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 ff9f 	bl	8003132 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2260      	movs	r2, #96	; 0x60
 80021fa:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d011      	beq.n	800222a <HAL_ADC_IRQHandler+0x266>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00c      	beq.n	800222a <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f891 	bl	8002344 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <HAL_ADC_IRQHandler+0x296>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00d      	beq.n	800225a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 ff85 	bl	800315a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <HAL_ADC_IRQHandler+0x2c6>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 ff77 	bl	800316e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d02b      	beq.n	80022ec <HAL_ADC_IRQHandler+0x328>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d026      	beq.n	80022ec <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e009      	b.n	80022c0 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fb6d 	bl	8001990 <LL_ADC_REG_GetDMATransfer>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80022bc:	2301      	movs	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10e      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f043 0202 	orr.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f83a 	bl	8002358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2210      	movs	r2, #16
 80022ea:	601a      	str	r2, [r3, #0]

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d018      	beq.n	8002328 <HAL_ADC_IRQHandler+0x364>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f043 0208 	orr.w	r2, r3, #8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002320:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 ff0f 	bl	8003146 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0b6      	sub	sp, #216	; 0xd8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x22>
 800238a:	2302      	movs	r3, #2
 800238c:	e39e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x760>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fc18 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8383 	bne.w	8002aae <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	f7ff fabf 	bl	8001938 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fc06 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 80023c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fc12 	bl	8001bf6 <LL_ADC_INJ_IsConversionOngoing>
 80023d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 81a6 	bne.w	800272c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f040 81a1 	bne.w	800272c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f7ff faeb 	bl	80019d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00a      	beq.n	8002434 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800242e:	f7ff fa1b 	bl	8001868 <LL_ADC_SetOffset>
 8002432:	e17b      	b.n	800272c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fa38 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_ADC_ConfigChannel+0xf4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fa2d 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	e01e      	b.n	800249e <HAL_ADC_ConfigChannel+0x132>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fa22 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800247e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800248e:	2320      	movs	r3, #32
 8002490:	e004      	b.n	800249c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x14a>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	e018      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x17c>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e004      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80024de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f9f1 	bl	80018dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff f9d5 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x1ba>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f9ca 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	e01e      	b.n	8002564 <HAL_ADC_ConfigChannel+0x1f8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff f9bf 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800254c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e004      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_ADC_ConfigChannel+0x210>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	e018      	b.n	80025ae <HAL_ADC_ConfigChannel+0x242>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e004      	b.n	80025ae <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80025a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2101      	movs	r1, #1
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f98e 	bl	80018dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2102      	movs	r1, #2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f972 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x280>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2102      	movs	r1, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f967 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 021f 	and.w	r2, r3, #31
 80025ea:	e01e      	b.n	800262a <HAL_ADC_ConfigChannel+0x2be>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2102      	movs	r1, #2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f95c 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800260a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e004      	b.n	8002628 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800261e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x2d6>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	e016      	b.n	8002670 <HAL_ADC_ConfigChannel+0x304>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800265a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e004      	b.n	8002670 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002666:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	429a      	cmp	r2, r3
 8002672:	d106      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	2102      	movs	r1, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f92d 	bl	80018dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2103      	movs	r1, #3
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f911 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x342>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2103      	movs	r1, #3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f906 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	0e9b      	lsrs	r3, r3, #26
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	e017      	b.n	80026de <HAL_ADC_ConfigChannel+0x372>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2103      	movs	r1, #3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f8fb 	bl	80018b0 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80026d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x38a>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	e011      	b.n	800271a <HAL_ADC_ConfigChannel+0x3ae>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002706:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	2103      	movs	r1, #3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f8d8 	bl	80018dc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fa3a 	bl	8001baa <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 81c1 	bne.w	8002ac0 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f7ff f96c 	bl	8001a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a8e      	ldr	r2, [pc, #568]	; (8002990 <HAL_ADC_ConfigChannel+0x624>)
 8002756:	4293      	cmp	r3, r2
 8002758:	f040 8130 	bne.w	80029bc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x418>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b09      	cmp	r3, #9
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e019      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x44c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002794:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e003      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80027a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2b09      	cmp	r3, #9
 80027b0:	bf94      	ite	ls
 80027b2:	2301      	movls	r3, #1
 80027b4:	2300      	movhi	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d079      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x46c>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	069b      	lsls	r3, r3, #26
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d6:	e015      	b.n	8002804 <HAL_ADC_ConfigChannel+0x498>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	069b      	lsls	r3, r3, #26
 8002800:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x4b8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	e017      	b.n	8002854 <HAL_ADC_ConfigChannel+0x4e8>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e003      	b.n	8002848 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_ADC_ConfigChannel+0x50e>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	051b      	lsls	r3, r3, #20
 8002878:	e018      	b.n	80028ac <HAL_ADC_ConfigChannel+0x540>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800288c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ac:	430b      	orrs	r3, r1
 80028ae:	e080      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x560>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ca:	e015      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x58c>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x5ac>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	3301      	adds	r3, #1
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	e017      	b.n	8002948 <HAL_ADC_ConfigChannel+0x5dc>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	61fb      	str	r3, [r7, #28]
  return result;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	ea42 0103 	orr.w	r1, r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x608>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	3b1e      	subs	r3, #30
 800296c:	051b      	lsls	r3, r3, #20
 800296e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002972:	e01d      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x644>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	613b      	str	r3, [r7, #16]
  return result;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e005      	b.n	800299c <HAL_ADC_ConfigChannel+0x630>
 8002990:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	3b1e      	subs	r3, #30
 80029aa:	051b      	lsls	r3, r3, #20
 80029ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b0:	430b      	orrs	r3, r1
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7ff f80b 	bl	80019d2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <HAL_ADC_ConfigChannel+0x768>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d07b      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029c8:	4843      	ldr	r0, [pc, #268]	; (8002ad8 <HAL_ADC_ConfigChannel+0x76c>)
 80029ca:	f7fe ff3f 	bl	800184c <LL_ADC_GetCommonPathInternalCh>
 80029ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d2:	4842      	ldr	r0, [pc, #264]	; (8002adc <HAL_ADC_ConfigChannel+0x770>)
 80029d4:	f7ff f8e9 	bl	8001baa <LL_ADC_IsEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d15d      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <HAL_ADC_ConfigChannel+0x774>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d126      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x6ca>
 80029e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d120      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a38      	ldr	r2, [pc, #224]	; (8002adc <HAL_ADC_ConfigChannel+0x770>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d160      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80029fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a06:	4619      	mov	r1, r3
 8002a08:	4833      	ldr	r0, [pc, #204]	; (8002ad8 <HAL_ADC_ConfigChannel+0x76c>)
 8002a0a:	f7fe ff0c 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a0e:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_ADC_ConfigChannel+0x778>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	4a34      	ldr	r2, [pc, #208]	; (8002ae8 <HAL_ADC_ConfigChannel+0x77c>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	099a      	lsrs	r2, r3, #6
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a34:	e044      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <HAL_ADC_ConfigChannel+0x780>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d113      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x6fc>
 8002a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10d      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_ADC_ConfigChannel+0x770>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d134      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	481d      	ldr	r0, [pc, #116]	; (8002ad8 <HAL_ADC_ConfigChannel+0x76c>)
 8002a62:	f7fe fee0 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a66:	e02b      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <HAL_ADC_ConfigChannel+0x784>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d126      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
 8002a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d120      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a16      	ldr	r2, [pc, #88]	; (8002adc <HAL_ADC_ConfigChannel+0x770>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d11b      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a90:	4619      	mov	r1, r3
 8002a92:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <HAL_ADC_ConfigChannel+0x76c>)
 8002a94:	f7fe fec7 	bl	8001826 <LL_ADC_SetCommonPathInternalCh>
 8002a98:	e012      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002aac:	e008      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002ac8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	37d8      	adds	r7, #216	; 0xd8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	80080000 	.word	0x80080000
 8002ad8:	50040300 	.word	0x50040300
 8002adc:	50040000 	.word	0x50040000
 8002ae0:	c7520000 	.word	0xc7520000
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	053e2d63 	.word	0x053e2d63
 8002aec:	cb840000 	.word	0xcb840000
 8002af0:	80000001 	.word	0x80000001

08002af4 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

#if defined (ADC_SUPPORT_2_5_MSPS)
  if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
#else
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b0c:	d003      	beq.n	8002b16 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002b12:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_AnalogWDGConfig+0x30>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e1ea      	b.n	8002efa <HAL_ADC_AnalogWDGConfig+0x406>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f84d 	bl	8001bd0 <LL_ADC_REG_IsConversionOngoing>
 8002b36:	6338      	str	r0, [r7, #48]	; 0x30
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f85a 	bl	8001bf6 <LL_ADC_INJ_IsConversionOngoing>
 8002b42:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 81c8 	bne.w	8002edc <HAL_ADC_AnalogWDGConfig+0x3e8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 81c4 	bne.w	8002edc <HAL_ADC_AnalogWDGConfig+0x3e8>
     )
#endif /* ADC_SUPPORT_2_5_MSPS */
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4aaa      	ldr	r2, [pc, #680]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f040 80a2 	bne.w	8002ca4 <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002b68:	d034      	beq.n	8002bd4 <HAL_ADC_AnalogWDGConfig+0xe0>
 8002b6a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002b6e:	d856      	bhi.n	8002c1e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b74:	d04b      	beq.n	8002c0e <HAL_ADC_AnalogWDGConfig+0x11a>
 8002b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b7a:	d850      	bhi.n	8002c1e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b7c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002b80:	d01b      	beq.n	8002bba <HAL_ADC_AnalogWDGConfig+0xc6>
 8002b82:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002b86:	d84a      	bhi.n	8002c1e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b8c:	d037      	beq.n	8002bfe <HAL_ADC_AnalogWDGConfig+0x10a>
 8002b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b92:	d844      	bhi.n	8002c1e <HAL_ADC_AnalogWDGConfig+0x12a>
 8002b94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b98:	d029      	beq.n	8002bee <HAL_ADC_AnalogWDGConfig+0xfa>
 8002b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b9e:	d13e      	bne.n	8002c1e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002bac:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4994      	ldr	r1, [pc, #592]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002bb4:	f7fe ff5c 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8002bb8:	e039      	b.n	8002c2e <HAL_ADC_AnalogWDGConfig+0x13a>

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002bc6:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002bca:	461a      	mov	r2, r3
 8002bcc:	498d      	ldr	r1, [pc, #564]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002bce:	f7fe ff4f 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8002bd2:	e02c      	b.n	8002c2e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002be0:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8002be4:	461a      	mov	r2, r3
 8002be6:	4987      	ldr	r1, [pc, #540]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002be8:	f7fe ff42 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002bec:	e01f      	b.n	8002c2e <HAL_ADC_AnalogWDGConfig+0x13a>
#endif /* ADC_SUPPORT_2_5_MSPS */

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a85      	ldr	r2, [pc, #532]	; (8002e08 <HAL_ADC_AnalogWDGConfig+0x314>)
 8002bf4:	4983      	ldr	r1, [pc, #524]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe ff3a 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002bfc:	e017      	b.n	8002c2e <HAL_ADC_AnalogWDGConfig+0x13a>

#if defined (ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a82      	ldr	r2, [pc, #520]	; (8002e0c <HAL_ADC_AnalogWDGConfig+0x318>)
 8002c04:	497f      	ldr	r1, [pc, #508]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ff32 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c0c:	e00f      	b.n	8002c2e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7f      	ldr	r2, [pc, #508]	; (8002e10 <HAL_ADC_AnalogWDGConfig+0x31c>)
 8002c14:	497b      	ldr	r1, [pc, #492]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe ff2a 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c1c:	e007      	b.n	8002c2e <HAL_ADC_AnalogWDGConfig+0x13a>
#endif /* ADC_SUPPORT_2_5_MSPS */

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4977      	ldr	r1, [pc, #476]	; (8002e04 <HAL_ADC_AnalogWDGConfig+0x310>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe ff22 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002c2c:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	f7fe ff2e 	bl	8001aca <LL_ADC_ConfigAnalogWDThresholds>

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe ffcc 	bl	8001c1c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	7b1b      	ldrb	r3, [r3, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe ffec 	bl	8001c6e <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002c96:	e12a      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff f816 	bl	8001cce <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ca2:	e124      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x3fa>
    /* Feature "ADC analog watchdog 2 and 3" not available on ADC peripheral of this STM32WB device */
#else
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cac:	d01b      	beq.n	8002ce6 <HAL_ADC_AnalogWDGConfig+0x1f2>
 8002cae:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8002cb2:	f200 8086 	bhi.w	8002dc2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cba:	d079      	beq.n	8002db0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002cbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc0:	d87f      	bhi.n	8002dc2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cc2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002cc6:	d00e      	beq.n	8002ce6 <HAL_ADC_AnalogWDGConfig+0x1f2>
 8002cc8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002ccc:	d879      	bhi.n	8002dc2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd2:	d06d      	beq.n	8002db0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd8:	d873      	bhi.n	8002dc2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8002cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cde:	d067      	beq.n	8002db0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8002ce0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ce4:	d16d      	bne.n	8002dc2 <HAL_ADC_AnalogWDGConfig+0x2ce>
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
#endif
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_ADC_AnalogWDGConfig+0x320>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d12f      	bne.n	8002d50 <HAL_ADC_AnalogWDGConfig+0x25c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <HAL_ADC_AnalogWDGConfig+0x21a>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2201      	movs	r2, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	e016      	b.n	8002d3c <HAL_ADC_AnalogWDGConfig+0x248>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	61bb      	str	r3, [r7, #24]
  return result;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_AnalogWDGConfig+0x236>
    return 32U;
 8002d26:	2320      	movs	r3, #32
 8002d28:	e003      	b.n	8002d32 <HAL_ADC_AnalogWDGConfig+0x23e>
  return __builtin_clz(value);
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002d4e:	e041      	b.n	8002dd4 <HAL_ADC_AnalogWDGConfig+0x2e0>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d108      	bne.n	8002d6e <HAL_ADC_AnalogWDGConfig+0x27a>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2201      	movs	r2, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	e016      	b.n	8002d9c <HAL_ADC_AnalogWDGConfig+0x2a8>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
  return result;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_AnalogWDGConfig+0x296>
    return 32U;
 8002d86:	2320      	movs	r3, #32
 8002d88:	e003      	b.n	8002d92 <HAL_ADC_AnalogWDGConfig+0x29e>
  return __builtin_clz(value);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2201      	movs	r2, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8002dae:	e011      	b.n	8002dd4 <HAL_ADC_AnalogWDGConfig+0x2e0>
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
#endif
#if defined (ADC_SUPPORT_2_5_MSPS)
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG);
#else
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <HAL_ADC_AnalogWDGConfig+0x31c>)
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7fe fe58 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
#endif
          break;
 8002dc0:	e008      	b.n	8002dd4 <HAL_ADC_AnalogWDGConfig+0x2e0>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f7fe fe4f 	bl	8001a70 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002dd2:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0318 	and.w	r3, r3, #24
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	d01a      	beq.n	8002e18 <HAL_ADC_AnalogWDGConfig+0x324>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	f1c3 0302 	rsb	r3, r3, #2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	f003 031e 	and.w	r3, r3, #30
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	e00d      	b.n	8002e1e <HAL_ADC_AnalogWDGConfig+0x32a>
 8002e02:	bf00      	nop
 8002e04:	7dc00000 	.word	0x7dc00000
 8002e08:	0087ffff 	.word	0x0087ffff
 8002e0c:	0107ffff 	.word	0x0107ffff
 8002e10:	0187ffff 	.word	0x0187ffff
 8002e14:	0017ffff 	.word	0x0017ffff
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0318 	and.w	r3, r3, #24
 8002e2a:	2b18      	cmp	r3, #24
 8002e2c:	d00f      	beq.n	8002e4e <HAL_ADC_AnalogWDGConfig+0x35a>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	08db      	lsrs	r3, r3, #3
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	f1c3 0302 	rsb	r3, r3, #2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	f003 031e 	and.w	r3, r3, #30
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	e002      	b.n	8002e54 <HAL_ADC_AnalogWDGConfig+0x360>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e62:	f7fe fe32 	bl	8001aca <LL_ADC_ConfigAnalogWDThresholds>

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <HAL_ADC_AnalogWDGConfig+0x410>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d11a      	bne.n	8002ea6 <HAL_ADC_AnalogWDGConfig+0x3b2>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fed8 	bl	8001c36 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7b1b      	ldrb	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <HAL_ADC_AnalogWDGConfig+0x3a6>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fefb 	bl	8001c8e <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002e98:	e029      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ff25 	bl	8001cee <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ea4:	e023      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x3fa>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fecb 	bl	8001c52 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_ADC_AnalogWDGConfig+0x3dc>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fef0 	bl	8001cae <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002ece:	e00e      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x3fa>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe ff1a 	bl	8001d0e <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8002eda:	e008      	b.n	8002eee <HAL_ADC_AnalogWDGConfig+0x3fa>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3738      	adds	r7, #56	; 0x38
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	0017ffff 	.word	0x0017ffff

08002f08 <LL_ADC_SetCommonPathInternalCh>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_ADC_GetCommonPathInternalCh>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <LL_ADC_SetOffset>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <LL_ADC_SetOffset+0x44>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	601a      	str	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	03fff000 	.word	0x03fff000

08002f94 <LL_ADC_GetOffsetChannel>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3360      	adds	r3, #96	; 0x60
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_SetOffsetState>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3360      	adds	r3, #96	; 0x60
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	601a      	str	r2, [r3, #0]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_ADC_INJ_SetQueueMode>:
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <LL_ADC_SetChannelSamplingTime>:
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3314      	adds	r3, #20
 8003030:	461a      	mov	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0e5b      	lsrs	r3, r3, #25
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	4413      	add	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0d1b      	lsrs	r3, r3, #20
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2107      	movs	r1, #7
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	401a      	ands	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0d1b      	lsrs	r3, r3, #20
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <LL_ADC_SetChannelSingleDiff>:
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0318 	and.w	r3, r3, #24
 800309a:	4908      	ldr	r1, [pc, #32]	; (80030bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800309c:	40d9      	lsrs	r1, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	400b      	ands	r3, r1
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	0007ffff 	.word	0x0007ffff

080030c0 <LL_ADC_IsEnabled>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <LL_ADC_IsEnabled+0x18>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <LL_ADC_IsEnabled+0x1a>
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d101      	bne.n	80030fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_INJ_IsConversionOngoing>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b08      	cmp	r3, #8
 800311e:	d101      	bne.n	8003124 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0b6      	sub	sp, #216	; 0xd8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80031bc:	2302      	movs	r3, #2
 80031be:	f000 bc85 	b.w	8003acc <HAL_ADCEx_InjectedConfigChannel+0x934>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d130      	bne.n	800323c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d179      	bne.n	80032d6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80031fe:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800320a:	e007      	b.n	800321c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003222:	4ba0      	ldr	r3, [pc, #640]	; (80034a4 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800322e:	430b      	orrs	r3, r1
 8003230:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003238:	65da      	str	r2, [r3, #92]	; 0x5c
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800323a:	e04c      	b.n	80032d6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11d      	bne.n	8003280 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003268:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003274:	e004      	b.n	8003280 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	3b01      	subs	r3, #1
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0e9b      	lsrs	r3, r3, #26
 8003286:	f003 021f 	and.w	r2, r3, #31
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a4:	1e5a      	subs	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c6:	4b77      	ldr	r3, [pc, #476]	; (80034a4 <HAL_ADCEx_InjectedConfigChannel+0x30c>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	430b      	orrs	r3, r1
 80032d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff16 	bl	800310c <LL_ADC_INJ_IsConversionOngoing>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d120      	bne.n	8003328 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	7f5b      	ldrb	r3, [r3, #29]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d110      	bne.n	8003310 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	7f9b      	ldrb	r3, [r3, #30]
 80032fc:	055a      	lsls	r2, r3, #21
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	7f1b      	ldrb	r3, [r3, #28]
 8003302:	051b      	lsls	r3, r3, #20
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e00b      	b.n	8003328 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7f9b      	ldrb	r3, [r3, #30]
 800331e:	055a      	lsls	r2, r3, #21
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff feda 	bl	80030e6 <LL_ADC_REG_IsConversionOngoing>
 8003332:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fee6 	bl	800310c <LL_ADC_INJ_IsConversionOngoing>
 8003340:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 81f8 	bne.w	800373e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800334e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 81f3 	bne.w	800373e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d115      	bne.n	8003394 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	7f5b      	ldrb	r3, [r3, #29]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800337e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003380:	e01e      	b.n	80033c0 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003390:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003392:	e015      	b.n	80033c0 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	7f5b      	ldrb	r3, [r3, #29]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d109      	bne.n	80033b0 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54

        tmp_hal_status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80033ae:	e007      	b.n	80033c0 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80033be:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d110      	bne.n	80033ec <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	430b      	orrs	r3, r1
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0202 	orr.w	r2, r2, #2
 80033e8:	611a      	str	r2, [r3, #16]
 80033ea:	e007      	b.n	80033fc <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0202 	bic.w	r2, r2, #2
 80033fa:	611a      	str	r2, [r3, #16]
    }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	461a      	mov	r2, r3
 800340a:	f7ff fe09 	bl	8003020 <LL_ADC_SetChannelSamplingTime>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	08db      	lsrs	r3, r3, #3
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d00a      	beq.n	8003446 <HAL_ADCEx_InjectedConfigChannel+0x2ae>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6919      	ldr	r1, [r3, #16]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003440:	f7ff fd84 	bl	8002f4c <LL_ADC_SetOffset>
 8003444:	e17b      	b.n	800373e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fda1 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 8003452:	4603      	mov	r3, r0
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_ADCEx_InjectedConfigChannel+0x2da>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fd96 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 8003468:	4603      	mov	r3, r0
 800346a:	0e9b      	lsrs	r3, r3, #26
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	e020      	b.n	80034b4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fd8b 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 800347e:	4603      	mov	r3, r0
 8003480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003490:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_ADCEx_InjectedConfigChannel+0x310>
    return 32U;
 80034a0:	2320      	movs	r3, #32
 80034a2:	e006      	b.n	80034b2 <HAL_ADCEx_InjectedConfigChannel+0x31a>
 80034a4:	82082000 	.word	0x82082000
  return __builtin_clz(value);
 80034a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_ADCEx_InjectedConfigChannel+0x334>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	e018      	b.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x366>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80034e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80034e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADCEx_InjectedConfigChannel+0x35c>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e004      	b.n	80034fe <HAL_ADCEx_InjectedConfigChannel+0x366>
  return __builtin_clz(value);
 80034f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	429a      	cmp	r2, r3
 8003500:	d106      	bne.n	8003510 <HAL_ADCEx_InjectedConfigChannel+0x378>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fd58 	bl	8002fc0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2101      	movs	r1, #1
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fd3c 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <HAL_ADCEx_InjectedConfigChannel+0x3a4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fd31 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 021f 	and.w	r2, r3, #31
 800353a:	e01e      	b.n	800357a <HAL_ADCEx_InjectedConfigChannel+0x3e2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fd26 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800355a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800355e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADCEx_InjectedConfigChannel+0x3d6>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e004      	b.n	8003578 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 800356e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	e018      	b.n	80035c4 <HAL_ADCEx_InjectedConfigChannel+0x42c>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80035a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80035ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_ADCEx_InjectedConfigChannel+0x422>
    return 32U;
 80035b6:	2320      	movs	r3, #32
 80035b8:	e004      	b.n	80035c4 <HAL_ADCEx_InjectedConfigChannel+0x42c>
  return __builtin_clz(value);
 80035ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d106      	bne.n	80035d6 <HAL_ADCEx_InjectedConfigChannel+0x43e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fcf5 	bl	8002fc0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2102      	movs	r1, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fcd9 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADCEx_InjectedConfigChannel+0x46a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2102      	movs	r1, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fcce 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 80035f8:	4603      	mov	r3, r0
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	e01e      	b.n	8003640 <HAL_ADCEx_InjectedConfigChannel+0x4a8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fcc3 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 800360e:	4603      	mov	r3, r0
 8003610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADCEx_InjectedConfigChannel+0x49c>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e004      	b.n	800363e <HAL_ADCEx_InjectedConfigChannel+0x4a6>
  return __builtin_clz(value);
 8003634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	e014      	b.n	8003682 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800366c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e004      	b.n	8003682 <HAL_ADCEx_InjectedConfigChannel+0x4ea>
  return __builtin_clz(value);
 8003678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	429a      	cmp	r2, r3
 8003684:	d106      	bne.n	8003694 <HAL_ADCEx_InjectedConfigChannel+0x4fc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fc96 	bl	8002fc0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2103      	movs	r1, #3
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fc7a 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <HAL_ADCEx_InjectedConfigChannel+0x528>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2103      	movs	r1, #3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fc6f 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 80036b6:	4603      	mov	r3, r0
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	f003 021f 	and.w	r2, r3, #31
 80036be:	e017      	b.n	80036f0 <HAL_ADCEx_InjectedConfigChannel+0x558>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2103      	movs	r1, #3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fc64 	bl	8002f94 <LL_ADC_GetOffsetChannel>
 80036cc:	4603      	mov	r3, r0
 80036ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80036dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADCEx_InjectedConfigChannel+0x54e>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADCEx_InjectedConfigChannel+0x556>
  return __builtin_clz(value);
 80036e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_ADCEx_InjectedConfigChannel+0x570>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	e011      	b.n	800372c <HAL_ADCEx_InjectedConfigChannel+0x594>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003718:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800371a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_ADCEx_InjectedConfigChannel+0x58c>
    return 32U;
 8003720:	2320      	movs	r3, #32
 8003722:	e003      	b.n	800372c <HAL_ADCEx_InjectedConfigChannel+0x594>
  return __builtin_clz(value);
 8003724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	429a      	cmp	r2, r3
 800372e:	d106      	bne.n	800373e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2200      	movs	r2, #0
 8003736:	2103      	movs	r1, #3
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fc41 	bl	8002fc0 <LL_ADC_SetOffsetState>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fcbc 	bl	80030c0 <LL_ADC_IsEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 81b8 	bne.w	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	461a      	mov	r2, r3
 800375e:	f7ff fc8b 	bl	8003078 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4a8f      	ldr	r2, [pc, #572]	; (80039a4 <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	f040 8131 	bne.w	80039d0 <HAL_ADCEx_InjectedConfigChannel+0x838>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_ADCEx_InjectedConfigChannel+0x5fe>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	3301      	adds	r3, #1
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	2b09      	cmp	r3, #9
 800378c:	bf94      	ite	ls
 800378e:	2301      	movls	r3, #1
 8003790:	2300      	movhi	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	e019      	b.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0x632>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80037a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e003      	b.n	80037ba <HAL_ADCEx_InjectedConfigChannel+0x622>
  return __builtin_clz(value);
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	bf94      	ite	ls
 80037c4:	2301      	movls	r3, #1
 80037c6:	2300      	movhi	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d079      	beq.n	80038c2 <HAL_ADCEx_InjectedConfigChannel+0x72a>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_ADCEx_InjectedConfigChannel+0x652>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	3301      	adds	r3, #1
 80037e2:	069b      	lsls	r3, r3, #26
 80037e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037e8:	e015      	b.n	8003816 <HAL_ADCEx_InjectedConfigChannel+0x67e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80037f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80037fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADCEx_InjectedConfigChannel+0x66e>
    return 32U;
 8003802:	2320      	movs	r3, #32
 8003804:	e003      	b.n	800380e <HAL_ADCEx_InjectedConfigChannel+0x676>
  return __builtin_clz(value);
 8003806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3301      	adds	r3, #1
 8003810:	069b      	lsls	r3, r3, #26
 8003812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_ADCEx_InjectedConfigChannel+0x69e>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	3301      	adds	r3, #1
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2101      	movs	r1, #1
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	e017      	b.n	8003866 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003846:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADCEx_InjectedConfigChannel+0x6ba>
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e003      	b.n	800385a <HAL_ADCEx_InjectedConfigChannel+0x6c2>
  return __builtin_clz(value);
 8003852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	3301      	adds	r3, #1
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	ea42 0103 	orr.w	r1, r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <HAL_ADCEx_InjectedConfigChannel+0x6f4>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0e9b      	lsrs	r3, r3, #26
 800387c:	3301      	adds	r3, #1
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	051b      	lsls	r3, r3, #20
 800388a:	e018      	b.n	80038be <HAL_ADCEx_InjectedConfigChannel+0x726>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_ADCEx_InjectedConfigChannel+0x710>
    return 32U;
 80038a4:	2320      	movs	r3, #32
 80038a6:	e003      	b.n	80038b0 <HAL_ADCEx_InjectedConfigChannel+0x718>
  return __builtin_clz(value);
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	051b      	lsls	r3, r3, #20
 80038be:	430b      	orrs	r3, r1
 80038c0:	e081      	b.n	80039c6 <HAL_ADCEx_InjectedConfigChannel+0x82e>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_ADCEx_InjectedConfigChannel+0x746>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	3301      	adds	r3, #1
 80038d6:	069b      	lsls	r3, r3, #26
 80038d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038dc:	e015      	b.n	800390a <HAL_ADCEx_InjectedConfigChannel+0x772>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_ADCEx_InjectedConfigChannel+0x762>
    return 32U;
 80038f6:	2320      	movs	r3, #32
 80038f8:	e003      	b.n	8003902 <HAL_ADCEx_InjectedConfigChannel+0x76a>
  return __builtin_clz(value);
 80038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3301      	adds	r3, #1
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_ADCEx_InjectedConfigChannel+0x792>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0e9b      	lsrs	r3, r3, #26
 800391c:	3301      	adds	r3, #1
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	e017      	b.n	800395a <HAL_ADCEx_InjectedConfigChannel+0x7c2>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	61bb      	str	r3, [r7, #24]
  return result;
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x7ae>
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e003      	b.n	800394e <HAL_ADCEx_InjectedConfigChannel+0x7b6>
  return __builtin_clz(value);
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	2101      	movs	r1, #1
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	ea42 0103 	orr.w	r1, r2, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10d      	bne.n	8003986 <HAL_ADCEx_InjectedConfigChannel+0x7ee>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0e9b      	lsrs	r3, r3, #26
 8003970:	3301      	adds	r3, #1
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	3b1e      	subs	r3, #30
 800397e:	051b      	lsls	r3, r3, #20
 8003980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003984:	e01e      	b.n	80039c4 <HAL_ADCEx_InjectedConfigChannel+0x82c>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]
  return result;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_ADCEx_InjectedConfigChannel+0x810>
    return 32U;
 800399e:	2320      	movs	r3, #32
 80039a0:	e006      	b.n	80039b0 <HAL_ADCEx_InjectedConfigChannel+0x818>
 80039a2:	bf00      	nop
 80039a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f003 021f 	and.w	r2, r3, #31
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	3b1e      	subs	r3, #30
 80039be:	051b      	lsls	r3, r3, #20
 80039c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039c4:	430b      	orrs	r3, r1
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7ff fb28 	bl	8003020 <LL_ADC_SetChannelSamplingTime>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_ADCEx_InjectedConfigChannel+0x93c>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d071      	beq.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039dc:	483e      	ldr	r0, [pc, #248]	; (8003ad8 <HAL_ADCEx_InjectedConfigChannel+0x940>)
 80039de:	f7ff fb6f 	bl	80030c0 <LL_ADC_IsEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d162      	bne.n	8003aae <HAL_ADCEx_InjectedConfigChannel+0x916>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039e8:	483c      	ldr	r0, [pc, #240]	; (8003adc <HAL_ADCEx_InjectedConfigChannel+0x944>)
 80039ea:	f7ff faa0 	bl	8002f2e <LL_ADC_GetCommonPathInternalCh>
 80039ee:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a3a      	ldr	r2, [pc, #232]	; (8003ae0 <HAL_ADCEx_InjectedConfigChannel+0x948>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d126      	bne.n	8003a4a <HAL_ADCEx_InjectedConfigChannel+0x8b2>
 80039fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d120      	bne.n	8003a4a <HAL_ADCEx_InjectedConfigChannel+0x8b2>
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a32      	ldr	r2, [pc, #200]	; (8003ad8 <HAL_ADCEx_InjectedConfigChannel+0x940>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d156      	bne.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	482f      	ldr	r0, [pc, #188]	; (8003adc <HAL_ADCEx_InjectedConfigChannel+0x944>)
 8003a1e:	f7ff fa73 	bl	8002f08 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a22:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <HAL_ADCEx_InjectedConfigChannel+0x94c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	099b      	lsrs	r3, r3, #6
 8003a28:	4a2f      	ldr	r2, [pc, #188]	; (8003ae8 <HAL_ADCEx_InjectedConfigChannel+0x950>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	099a      	lsrs	r2, r3, #6
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	60bb      	str	r3, [r7, #8]
            while(wait_loop_index != 0UL)
 8003a3a:	e002      	b.n	8003a42 <HAL_ADCEx_InjectedConfigChannel+0x8aa>
            {
              wait_loop_index--;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	60bb      	str	r3, [r7, #8]
            while(wait_loop_index != 0UL)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f9      	bne.n	8003a3c <HAL_ADCEx_InjectedConfigChannel+0x8a4>
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a48:	e03a      	b.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a27      	ldr	r2, [pc, #156]	; (8003aec <HAL_ADCEx_InjectedConfigChannel+0x954>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d113      	bne.n	8003a7c <HAL_ADCEx_InjectedConfigChannel+0x8e4>
 8003a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10d      	bne.n	8003a7c <HAL_ADCEx_InjectedConfigChannel+0x8e4>
        {
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1c      	ldr	r2, [pc, #112]	; (8003ad8 <HAL_ADCEx_InjectedConfigChannel+0x940>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d12a      	bne.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a72:	4619      	mov	r1, r3
 8003a74:	4819      	ldr	r0, [pc, #100]	; (8003adc <HAL_ADCEx_InjectedConfigChannel+0x944>)
 8003a76:	f7ff fa47 	bl	8002f08 <LL_ADC_SetCommonPathInternalCh>
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a7a:	e021      	b.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_ADCEx_InjectedConfigChannel+0x958>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d11c      	bne.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
 8003a86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
        {
          if (ADC_VREFINT_INSTANCE(hadc))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <HAL_ADCEx_InjectedConfigChannel+0x940>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aa0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	480d      	ldr	r0, [pc, #52]	; (8003adc <HAL_ADCEx_InjectedConfigChannel+0x944>)
 8003aa8:	f7ff fa2e 	bl	8002f08 <LL_ADC_SetCommonPathInternalCh>
 8003aac:	e008      	b.n	8003ac0 <HAL_ADCEx_InjectedConfigChannel+0x928>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54

        tmp_hal_status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ac8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	37d8      	adds	r7, #216	; 0xd8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	80080000 	.word	0x80080000
 8003ad8:	50040000 	.word	0x50040000
 8003adc:	50040300 	.word	0x50040300
 8003ae0:	c7520000 	.word	0xc7520000
 8003ae4:	20000004 	.word	0x20000004
 8003ae8:	053e2d63 	.word	0x053e2d63
 8003aec:	cb840000 	.word	0xcb840000
 8003af0:	80000001 	.word	0x80000001

08003af4 <HAL_ADCEx_DisableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff faf0 	bl	80030e6 <LL_ADC_REG_IsConversionOngoing>
 8003b06:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fafd 	bl	800310c <LL_ADC_INJ_IsConversionOngoing>
 8003b12:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_ADCEx_DisableInjectedQueue+0x40>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <HAL_ADCEx_DisableInjectedQueue+0x40>
     )
  {
    LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fa64 	bl	8002ff6 <LL_ADC_INJ_SetQueueMode>
    tmp_hal_status = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
 8003b32:	e001      	b.n	8003b38 <HAL_ADCEx_DisableInjectedQueue+0x44>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <__NVIC_SetPriorityGrouping+0x44>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b60:	4013      	ands	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b76:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <__NVIC_SetPriorityGrouping+0x44>)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	60d3      	str	r3, [r2, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f003 0307 	and.w	r3, r3, #7
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	db0b      	blt.n	8003bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	4907      	ldr	r1, [pc, #28]	; (8003be0 <__NVIC_EnableIRQ+0x38>)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2001      	movs	r0, #1
 8003bca:	fa00 f202 	lsl.w	r2, r0, r2
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	e000e100 	.word	0xe000e100

08003be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	db0a      	blt.n	8003c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	490c      	ldr	r1, [pc, #48]	; (8003c30 <__NVIC_SetPriority+0x4c>)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	440b      	add	r3, r1
 8003c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c0c:	e00a      	b.n	8003c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4908      	ldr	r1, [pc, #32]	; (8003c34 <__NVIC_SetPriority+0x50>)
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	3b04      	subs	r3, #4
 8003c1c:	0112      	lsls	r2, r2, #4
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	440b      	add	r3, r1
 8003c22:	761a      	strb	r2, [r3, #24]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000e100 	.word	0xe000e100
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	; 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f1c3 0307 	rsb	r3, r3, #7
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	bf28      	it	cs
 8003c56:	2304      	movcs	r3, #4
 8003c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	2b06      	cmp	r3, #6
 8003c60:	d902      	bls.n	8003c68 <NVIC_EncodePriority+0x30>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3b03      	subs	r3, #3
 8003c66:	e000      	b.n	8003c6a <NVIC_EncodePriority+0x32>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c80:	f04f 31ff 	mov.w	r1, #4294967295
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	43d9      	mvns	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	4313      	orrs	r3, r2
         );
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb0:	d301      	bcc.n	8003cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00f      	b.n	8003cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <SysTick_Config+0x40>)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cbe:	210f      	movs	r1, #15
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	f7ff ff8e 	bl	8003be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <SysTick_Config+0x40>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <SysTick_Config+0x40>)
 8003cd0:	2207      	movs	r2, #7
 8003cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	e000e010 	.word	0xe000e010

08003ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff29 	bl	8003b44 <__NVIC_SetPriorityGrouping>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	4603      	mov	r3, r0
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d08:	f7ff ff40 	bl	8003b8c <__NVIC_GetPriorityGrouping>
 8003d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff90 	bl	8003c38 <NVIC_EncodePriority>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff5f 	bl	8003be4 <__NVIC_SetPriority>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff33 	bl	8003ba8 <__NVIC_EnableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffa4 	bl	8003ca0 <SysTick_Config>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e02d      	b.n	8003dd0 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fd f8c1 	bl	8000f10 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8003d98:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6851      	ldr	r1, [r2, #4]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6892      	ldr	r2, [r2, #8]
 8003da4:	4311      	orrs	r1, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6952      	ldr	r2, [r2, #20]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e08e      	b.n	8003f08 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_DMA_Init+0x138>)
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d80f      	bhi.n	8003e16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <HAL_DMA_Init+0x13c>)
 8003dfe:	4413      	add	r3, r2
 8003e00:	4a45      	ldr	r2, [pc, #276]	; (8003f18 <HAL_DMA_Init+0x140>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	009a      	lsls	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <HAL_DMA_Init+0x144>)
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
 8003e14:	e00e      	b.n	8003e34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <HAL_DMA_Init+0x148>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a3d      	ldr	r2, [pc, #244]	; (8003f18 <HAL_DMA_Init+0x140>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <HAL_DMA_Init+0x14c>)
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f95c 	bl	8004144 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e94:	d102      	bne.n	8003e9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eb2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <HAL_DMA_Init+0x106>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d80c      	bhi.n	8003ede <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f97b 	bl	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	e008      	b.n	8003ef0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40020407 	.word	0x40020407
 8003f14:	bffdfff8 	.word	0xbffdfff8
 8003f18:	cccccccd 	.word	0xcccccccd
 8003f1c:	40020000 	.word	0x40020000
 8003f20:	bffdfbf8 	.word	0xbffdfbf8
 8003f24:	40020400 	.word	0x40020400

08003f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d005      	beq.n	8003f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2204      	movs	r2, #4
 8003f44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	e047      	b.n	8003fdc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 020e 	bic.w	r2, r2, #14
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f003 021c 	and.w	r2, r3, #28
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
    }
  }
  return status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f003 031c 	and.w	r3, r3, #28
 8004006:	2204      	movs	r2, #4
 8004008:	409a      	lsls	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d026      	beq.n	8004060 <HAL_DMA_IRQHandler+0x7a>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d021      	beq.n	8004060 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d107      	bne.n	800403a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f003 021c 	and.w	r2, r3, #28
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2104      	movs	r1, #4
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	2b00      	cmp	r3, #0
 8004054:	d071      	beq.n	800413a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800405e:	e06c      	b.n	800413a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 031c 	and.w	r3, r3, #28
 8004068:	2202      	movs	r2, #2
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02e      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xec>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d029      	beq.n	80040d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10b      	bne.n	80040a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 020a 	bic.w	r2, r2, #10
 800409a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 021c 	and.w	r2, r3, #28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2102      	movs	r1, #2
 80040b2:	fa01 f202 	lsl.w	r2, r1, r2
 80040b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d038      	beq.n	800413a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80040d0:	e033      	b.n	800413a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f003 031c 	and.w	r3, r3, #28
 80040da:	2208      	movs	r2, #8
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02a      	beq.n	800413c <HAL_DMA_IRQHandler+0x156>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d025      	beq.n	800413c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 020e 	bic.w	r2, r2, #14
 80040fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	f003 021c 	and.w	r2, r3, #28
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f202 	lsl.w	r2, r1, r2
 8004112:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800413a:	bf00      	nop
 800413c:	bf00      	nop
}
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d80a      	bhi.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	089b      	lsrs	r3, r3, #2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004164:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6493      	str	r3, [r2, #72]	; 0x48
 800416c:	e007      	b.n	800417e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	009a      	lsls	r2, r3, #2
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004178:	4413      	add	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3b08      	subs	r3, #8
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004194:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40020407 	.word	0x40020407
 80041b4:	4002081c 	.word	0x4002081c
 80041b8:	cccccccd 	.word	0xcccccccd
 80041bc:	40020880 	.word	0x40020880

080041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80041e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2201      	movs	r2, #1
 80041f0:	409a      	lsls	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	1000823f 	.word	0x1000823f
 8004208:	40020940 	.word	0x40020940

0800420c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800421a:	e14c      	b.n	80044b6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2101      	movs	r1, #1
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	4013      	ands	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 813e 	beq.w	80044b0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d00b      	beq.n	8004254 <HAL_GPIO_Init+0x48>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d007      	beq.n	8004254 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004248:	2b11      	cmp	r3, #17
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b12      	cmp	r3, #18
 8004252:	d130      	bne.n	80042b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800428a:	2201      	movs	r2, #1
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	f003 0201 	and.w	r2, r3, #1
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0xea>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b12      	cmp	r3, #18
 80042f4:	d123      	bne.n	800433e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	08da      	lsrs	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3208      	adds	r2, #8
 80042fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	08da      	lsrs	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3208      	adds	r2, #8
 8004338:	6939      	ldr	r1, [r7, #16]
 800433a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 0203 	and.w	r2, r3, #3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8098 	beq.w	80044b0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004380:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_GPIO_Init+0x2c8>)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	3302      	adds	r3, #2
 8004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	220f      	movs	r2, #15
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043aa:	d019      	beq.n	80043e0 <HAL_GPIO_Init+0x1d4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <HAL_GPIO_Init+0x2cc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <HAL_GPIO_Init+0x1d0>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a49      	ldr	r2, [pc, #292]	; (80044dc <HAL_GPIO_Init+0x2d0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00d      	beq.n	80043d8 <HAL_GPIO_Init+0x1cc>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a48      	ldr	r2, [pc, #288]	; (80044e0 <HAL_GPIO_Init+0x2d4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <HAL_GPIO_Init+0x1c8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a47      	ldr	r2, [pc, #284]	; (80044e4 <HAL_GPIO_Init+0x2d8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d101      	bne.n	80043d0 <HAL_GPIO_Init+0x1c4>
 80043cc:	2304      	movs	r3, #4
 80043ce:	e008      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043d0:	2307      	movs	r3, #7
 80043d2:	e006      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043d4:	2303      	movs	r3, #3
 80043d6:	e004      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043d8:	2302      	movs	r3, #2
 80043da:	e002      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <HAL_GPIO_Init+0x1d6>
 80043e0:	2300      	movs	r3, #0
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	f002 0203 	and.w	r2, r2, #3
 80043e8:	0092      	lsls	r2, r2, #2
 80043ea:	4093      	lsls	r3, r2
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043f2:	4938      	ldr	r1, [pc, #224]	; (80044d4 <HAL_GPIO_Init+0x2c8>)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	089b      	lsrs	r3, r3, #2
 80043f8:	3302      	adds	r3, #2
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 8004402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43db      	mvns	r3, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004426:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 8004430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800445c:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43db      	mvns	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004480:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044aa:	4a0f      	ldr	r2, [pc, #60]	; (80044e8 <HAL_GPIO_Init+0x2dc>)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3301      	adds	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f47f aeab 	bne.w	800421c <HAL_GPIO_Init+0x10>
  }
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40010000 	.word	0x40010000
 80044d8:	48000400 	.word	0x48000400
 80044dc:	48000800 	.word	0x48000800
 80044e0:	48000c00 	.word	0x48000c00
 80044e4:	48001000 	.word	0x48001000
 80044e8:	58000800 	.word	0x58000800

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004508:	e002      	b.n	8004510 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e081      	b.n	8004632 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fc fcf8 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800456c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	e006      	b.n	80045a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d104      	bne.n	80045b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	ea42 0103 	orr.w	r1, r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69d9      	ldr	r1, [r3, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b20      	cmp	r3, #32
 800464e:	d138      	bne.n	80046c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800465a:	2302      	movs	r3, #2
 800465c:	e032      	b.n	80046c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2224      	movs	r2, #36	; 0x24
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800468c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d139      	bne.n	800475a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e033      	b.n	800475c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004722:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01d      	beq.n	80047b6 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	791b      	ldrb	r3, [r3, #4]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc fd1d 	bl	80011c4 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 80047a6:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	711a      	strb	r2, [r3, #4]
 80047b4:	e001      	b.n	80047ba <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t mode = PKA_GetMode(hpka);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f895 	bl	80048fc <PKA_GetMode>
 80047d2:	60f8      	str	r0, [r7, #12]
  FlagStatus addErrFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	72fb      	strb	r3, [r7, #11]
  FlagStatus ramErrFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	72bb      	strb	r3, [r7, #10]
  FlagStatus procEndFlag = __HAL_PKA_GET_FLAG(hpka, PKA_FLAG_PROCEND);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	727b      	strb	r3, [r7, #9]

  /* Address error interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_IT_ADDRERR) == SET) && (addErrFlag == SET))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482a:	d10d      	bne.n	8004848 <HAL_PKA_IRQHandler+0x84>
 800482c:	7afb      	ldrb	r3, [r7, #11]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d10a      	bne.n	8004848 <HAL_PKA_IRQHandler+0x84>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f043 0201 	orr.w	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004846:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_IT_RAMERR) == SET) && (ramErrFlag == SET))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004856:	d10d      	bne.n	8004874 <HAL_PKA_IRQHandler+0xb0>
 8004858:	7abb      	ldrb	r3, [r7, #10]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10a      	bne.n	8004874 <HAL_PKA_IRQHandler+0xb0>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f043 0202 	orr.w	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b24      	cmp	r3, #36	; 0x24
 8004878:	d10b      	bne.n	8004892 <HAL_PKA_IRQHandler+0xce>
  {
    /* If error output result is different from 0, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0UL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8d3 3ee8 	ldr.w	r3, [r3, #3816]	; 0xee8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_PKA_IRQHandler+0xce>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f043 0208 	orr.w	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
    }
  }
  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_PKA_IRQHandler+0xdc>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f824 	bl	80048e8 <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if ((__HAL_PKA_GET_IT_SOURCE(hpka, PKA_IT_PROCEND) == SET) && (procEndFlag == SET))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ae:	d10d      	bne.n	80048cc <HAL_PKA_IRQHandler+0x108>
 80048b0:	7a7b      	ldrb	r3, [r7, #9]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10a      	bne.n	80048cc <HAL_PKA_IRQHandler+0x108>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048be:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f804 	bl	80048d4 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_PKA_OperationCpltCallback>:
  * @brief  Process completed callback.
  * @param  hpka PKA handle
  * @retval None
  */
__weak void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hpka);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PKA_OperationCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_PKA_ErrorCallback>:
  * @brief  Error callback.
  * @param  hpka PKA handle
  * @retval None
  */
__weak void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpka);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PKA_ErrorCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(PKA_HandleTypeDef *hpka)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <LL_EXTI_EnableIT_0_31+0x24>)
 8004926:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800492a:	4905      	ldr	r1, [pc, #20]	; (8004940 <LL_EXTI_EnableIT_0_31+0x24>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	58000800 	.word	0x58000800

08004944 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <LL_EXTI_DisableIT_0_31+0x28>)
 800494e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	43db      	mvns	r3, r3
 8004956:	4905      	ldr	r1, [pc, #20]	; (800496c <LL_EXTI_DisableIT_0_31+0x28>)
 8004958:	4013      	ands	r3, r2
 800495a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	58000800 	.word	0x58000800

08004970 <LL_C2_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800497a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	43db      	mvns	r3, r3
 8004982:	4905      	ldr	r1, [pc, #20]	; (8004998 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8004984:	4013      	ands	r3, r2
 8004986:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58000800 	.word	0x58000800

0800499c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4904      	ldr	r1, [pc, #16]	; (80049bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	600b      	str	r3, [r1, #0]

}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	58000800 	.word	0x58000800

080049c0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	4904      	ldr	r1, [pc, #16]	; (80049e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]

}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	58000800 	.word	0x58000800

080049e8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	58000800 	.word	0x58000800

08004a0c <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	4904      	ldr	r1, [pc, #16]	; (8004a30 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	58000800 	.word	0x58000800

08004a34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	58000400 	.word	0x58000400

08004a54 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_PWR_ConfigPVD+0x80>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f023 020e 	bic.w	r2, r3, #14
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	491a      	ldr	r1, [pc, #104]	; (8004ad4 <HAL_PWR_ConfigPVD+0x80>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB serie, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8004a6e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a72:	f7ff ff67 	bl	8004944 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8004a76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a7a:	f7ff ff79 	bl	8004970 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004a7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a82:	f7ff ffc3 	bl	8004a0c <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8004a86:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a8a:	f7ff ff99 	bl	80049c0 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004a9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004a9e:	f7ff ff3d 	bl	800491c <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004aae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ab2:	f7ff ff73 	bl	800499c <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004ac2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ac6:	f7ff ff8f 	bl	80049e8 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	58000400 	.word	0x58000400

08004ad8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_PWR_EnablePVD+0x1c>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <HAL_PWR_EnablePVD+0x1c>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6053      	str	r3, [r2, #4]
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	58000400 	.word	0x58000400

08004af8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <HAL_PWREx_GetVoltageRange+0x18>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	58000400 	.word	0x58000400

08004b14 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b26:	d101      	bne.n	8004b2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b86:	d101      	bne.n	8004b8c <LL_RCC_HSE_IsReady+0x18>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <LL_RCC_HSE_IsReady+0x1a>
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc8:	6013      	str	r3, [r2, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d101      	bne.n	8004bec <LL_RCC_HSI_IsReady+0x18>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <LL_RCC_HSI_IsReady+0x1a>
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d101      	bne.n	8004c7e <LL_RCC_HSI48_IsReady+0x18>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <LL_RCC_HSI48_IsReady+0x1a>
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ca2:	bf00      	nop
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cde:	f043 0304 	orr.w	r3, r3, #4
 8004ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004d12:	b480      	push	{r7}
 8004d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d101      	bne.n	8004d2a <LL_RCC_LSE_IsReady+0x18>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <LL_RCC_LSE_IsReady+0x1a>
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004d36:	b480      	push	{r7}
 8004d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d101      	bne.n	8004d92 <LL_RCC_LSI1_IsReady+0x18>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <LL_RCC_LSI1_IsReady+0x1a>
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d101      	bne.n	8004dfa <LL_RCC_LSI2_IsReady+0x18>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <LL_RCC_LSI2_IsReady+0x1a>
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	6013      	str	r3, [r2, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6013      	str	r3, [r2, #0]
}
 8004e66:	bf00      	nop
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d101      	bne.n	8004e86 <LL_RCC_MSI_IsReady+0x16>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <LL_RCC_MSI_IsReady+0x18>
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2bb0      	cmp	r3, #176	; 0xb0
 8004ed0:	d901      	bls.n	8004ed6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004ed2:	23b0      	movs	r3, #176	; 0xb0
 8004ed4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004ed6:	687b      	ldr	r3, [r7, #4]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efe:	4313      	orrs	r3, r2
 8004f00:	604b      	str	r3, [r1, #4]
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 0203 	bic.w	r2, r3, #3
 8004f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fb2:	f023 020f 	bic.w	r2, r3, #15
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	608b      	str	r3, [r1, #8]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800500a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4313      	orrs	r3, r2
 8005012:	608b      	str	r3, [r1, #8]
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800504a:	4618      	mov	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80050c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d2:	d101      	bne.n	80050d8 <LL_RCC_PLL_IsReady+0x18>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <LL_RCC_PLL_IsReady+0x1a>
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80050fe:	b480      	push	{r7}
 8005100:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800511a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0303 	and.w	r3, r3, #3
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005146:	b480      	push	{r7}
 8005148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d101      	bne.n	800515e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005172:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517e:	d101      	bne.n	8005184 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800519c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a4:	d101      	bne.n	80051aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c8:	d101      	bne.n	80051ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b08d      	sub	sp, #52	; 0x34
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e37e      	b.n	8005910 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8092 	beq.w	8005344 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005220:	f7ff fe89 	bl	8004f36 <LL_RCC_GetSysClkSource>
 8005224:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005226:	f7ff ff82 	bl	800512e <LL_RCC_PLL_GetMainSource>
 800522a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_RCC_OscConfig+0x3e>
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d14c      	bne.n	80052d2 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	2b01      	cmp	r3, #1
 800523c:	d149      	bne.n	80052d2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800523e:	f7ff fe17 	bl	8004e70 <LL_RCC_MSI_IsReady>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x54>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e35d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005258:	f7ff fe2f 	bl	8004eba <LL_RCC_MSI_GetRange>
 800525c:	4603      	mov	r3, r0
 800525e:	429c      	cmp	r4, r3
 8005260:	d914      	bls.n	800528c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fd42 	bl	8005cf0 <RCC_SetFlashLatencyFromMSIRange>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e34c      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fe09 	bl	8004e92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fe2d 	bl	8004ee4 <LL_RCC_MSI_SetCalibTrimming>
 800528a:	e013      	b.n	80052b4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fdfe 	bl	8004e92 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fe22 	bl	8004ee4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fd23 	bl	8005cf0 <RCC_SetFlashLatencyFromMSIRange>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e32d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052b4:	f000 fcdc 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4ab3      	ldr	r2, [pc, #716]	; (8005588 <HAL_RCC_OscConfig+0x388>)
 80052bc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052be:	4bb3      	ldr	r3, [pc, #716]	; (800558c <HAL_RCC_OscConfig+0x38c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc f9d6 	bl	8001674 <HAL_InitTick>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d039      	beq.n	8005342 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e31e      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01e      	beq.n	8005318 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052da:	f7ff fdab 	bl	8004e34 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052de:	f7fc fa17 	bl	8001710 <HAL_GetTick>
 80052e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052e6:	f7fc fa13 	bl	8001710 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e30b      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80052f8:	f7ff fdba 	bl	8004e70 <LL_RCC_MSI_IsReady>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f1      	beq.n	80052e6 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff fdc3 	bl	8004e92 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fde7 	bl	8004ee4 <LL_RCC_MSI_SetCalibTrimming>
 8005316:	e015      	b.n	8005344 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005318:	f7ff fd9b 	bl	8004e52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800531c:	f7fc f9f8 	bl	8001710 <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005324:	f7fc f9f4 	bl	8001710 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e2ec      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005336:	f7ff fd9b 	bl	8004e70 <LL_RCC_MSI_IsReady>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f1      	bne.n	8005324 <HAL_RCC_OscConfig+0x124>
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005342:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d04e      	beq.n	80053ee <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005350:	f7ff fdf1 	bl	8004f36 <LL_RCC_GetSysClkSource>
 8005354:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005356:	f7ff feea 	bl	800512e <LL_RCC_PLL_GetMainSource>
 800535a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	2b08      	cmp	r3, #8
 8005360:	d005      	beq.n	800536e <HAL_RCC_OscConfig+0x16e>
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d10d      	bne.n	8005384 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d10a      	bne.n	8005384 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536e:	f7ff fc01 	bl	8004b74 <LL_RCC_HSE_IsReady>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d039      	beq.n	80053ec <HAL_RCC_OscConfig+0x1ec>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d135      	bne.n	80053ec <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e2c5      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d102      	bne.n	8005394 <HAL_RCC_OscConfig+0x194>
 800538e:	f7ff fbd3 	bl	8004b38 <LL_RCC_HSE_Enable>
 8005392:	e001      	b.n	8005398 <HAL_RCC_OscConfig+0x198>
 8005394:	f7ff fbdf 	bl	8004b56 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d012      	beq.n	80053c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fc f9b6 	bl	8001710 <HAL_GetTick>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fc f9b2 	bl	8001710 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e2aa      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80053ba:	f7ff fbdb 	bl	8004b74 <LL_RCC_HSE_IsReady>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f1      	beq.n	80053a8 <HAL_RCC_OscConfig+0x1a8>
 80053c4:	e013      	b.n	80053ee <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fc f9a3 	bl	8001710 <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ce:	f7fc f99f 	bl	8001710 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b64      	cmp	r3, #100	; 0x64
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e297      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80053e0:	f7ff fbc8 	bl	8004b74 <LL_RCC_HSE_IsReady>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f1      	bne.n	80053ce <HAL_RCC_OscConfig+0x1ce>
 80053ea:	e000      	b.n	80053ee <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d051      	beq.n	800549e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fa:	f7ff fd9c 	bl	8004f36 <LL_RCC_GetSysClkSource>
 80053fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005400:	f7ff fe95 	bl	800512e <LL_RCC_PLL_GetMainSource>
 8005404:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x218>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b0c      	cmp	r3, #12
 8005410:	d113      	bne.n	800543a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d110      	bne.n	800543a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005418:	f7ff fbdc 	bl	8004bd4 <LL_RCC_HSI_IsReady>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_OscConfig+0x22e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e270      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fbe0 	bl	8004bf8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005438:	e031      	b.n	800549e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d019      	beq.n	8005476 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005442:	f7ff fba9 	bl	8004b98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fc f963 	bl	8001710 <HAL_GetTick>
 800544a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544e:	f7fc f95f 	bl	8001710 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e257      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005460:	f7ff fbb8 	bl	8004bd4 <LL_RCC_HSI_IsReady>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f1      	beq.n	800544e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fbc2 	bl	8004bf8 <LL_RCC_HSI_SetCalibTrimming>
 8005474:	e013      	b.n	800549e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005476:	f7ff fb9e 	bl	8004bb6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fc f949 	bl	8001710 <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005482:	f7fc f945 	bl	8001710 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e23d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005494:	f7ff fb9e 	bl	8004bd4 <LL_RCC_HSI_IsReady>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f1      	bne.n	8005482 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80a3 	beq.w	80055fe <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d076      	beq.n	80055ae <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d046      	beq.n	800555a <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80054cc:	f7ff fc55 	bl	8004d7a <LL_RCC_LSI1_IsReady>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d113      	bne.n	80054fe <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80054d6:	f7ff fc2e 	bl	8004d36 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054da:	f7fc f919 	bl	8001710 <HAL_GetTick>
 80054de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80054e2:	f7fc f915 	bl	8001710 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e20d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80054f4:	f7ff fc41 	bl	8004d7a <LL_RCC_LSI1_IsReady>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0f1      	beq.n	80054e2 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80054fe:	f7ff fc4e 	bl	8004d9e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fc f905 	bl	8001710 <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800550a:	f7fc f901 	bl	8001710 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e1f9      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800551c:	f7ff fc61 	bl	8004de2 <LL_RCC_LSI2_IsReady>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f1      	beq.n	800550a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fc6b 	bl	8004e06 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005530:	f7ff fc12 	bl	8004d58 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fc f8ec 	bl	8001710 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800553c:	f7fc f8e8 	bl	8001710 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e1e0      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800554e:	f7ff fc14 	bl	8004d7a <LL_RCC_LSI1_IsReady>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f1      	bne.n	800553c <HAL_RCC_OscConfig+0x33c>
 8005558:	e051      	b.n	80055fe <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800555a:	f7ff fbec 	bl	8004d36 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc f8d7 	bl	8001710 <HAL_GetTick>
 8005562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005566:	f7fc f8d3 	bl	8001710 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e1cb      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005578:	f7ff fbff 	bl	8004d7a <LL_RCC_LSI1_IsReady>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f1      	beq.n	8005566 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005582:	f7ff fc1d 	bl	8004dc0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005586:	e00c      	b.n	80055a2 <HAL_RCC_OscConfig+0x3a2>
 8005588:	20000004 	.word	0x20000004
 800558c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005590:	f7fc f8be 	bl	8001710 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b03      	cmp	r3, #3
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1b6      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80055a2:	f7ff fc1e 	bl	8004de2 <LL_RCC_LSI2_IsReady>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f1      	bne.n	8005590 <HAL_RCC_OscConfig+0x390>
 80055ac:	e027      	b.n	80055fe <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80055ae:	f7ff fc07 	bl	8004dc0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b2:	f7fc f8ad 	bl	8001710 <HAL_GetTick>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055ba:	f7fc f8a9 	bl	8001710 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e1a1      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80055cc:	f7ff fc09 	bl	8004de2 <LL_RCC_LSI2_IsReady>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f1      	bne.n	80055ba <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80055d6:	f7ff fbbf 	bl	8004d58 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055da:	f7fc f899 	bl	8001710 <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055e2:	f7fc f895 	bl	8001710 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e18d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80055f4:	f7ff fbc1 	bl	8004d7a <LL_RCC_LSI1_IsReady>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f1      	bne.n	80055e2 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d05b      	beq.n	80056c2 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560a:	4bb5      	ldr	r3, [pc, #724]	; (80058e0 <HAL_RCC_OscConfig+0x6e0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d114      	bne.n	8005640 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005616:	f7ff fa0d 	bl	8004a34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561a:	f7fc f879 	bl	8001710 <HAL_GetTick>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005622:	f7fc f875 	bl	8001710 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e16d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005634:	4baa      	ldr	r3, [pc, #680]	; (80058e0 <HAL_RCC_OscConfig+0x6e0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d102      	bne.n	800564e <HAL_RCC_OscConfig+0x44e>
 8005648:	f7ff fb1f 	bl	8004c8a <LL_RCC_LSE_Enable>
 800564c:	e00c      	b.n	8005668 <HAL_RCC_OscConfig+0x468>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b05      	cmp	r3, #5
 8005654:	d104      	bne.n	8005660 <HAL_RCC_OscConfig+0x460>
 8005656:	f7ff fb3a 	bl	8004cce <LL_RCC_LSE_EnableBypass>
 800565a:	f7ff fb16 	bl	8004c8a <LL_RCC_LSE_Enable>
 800565e:	e003      	b.n	8005668 <HAL_RCC_OscConfig+0x468>
 8005660:	f7ff fb24 	bl	8004cac <LL_RCC_LSE_Disable>
 8005664:	f7ff fb44 	bl	8004cf0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d014      	beq.n	800569a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fc f84e 	bl	8001710 <HAL_GetTick>
 8005674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005676:	e00a      	b.n	800568e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f7fc f84a 	bl	8001710 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e140      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800568e:	f7ff fb40 	bl	8004d12 <LL_RCC_LSE_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ef      	beq.n	8005678 <HAL_RCC_OscConfig+0x478>
 8005698:	e013      	b.n	80056c2 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fc f839 	bl	8001710 <HAL_GetTick>
 800569e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fc f835 	bl	8001710 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e12b      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80056b8:	f7ff fb2b 	bl	8004d12 <LL_RCC_LSE_IsReady>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ef      	bne.n	80056a2 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02c      	beq.n	8005728 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d014      	beq.n	8005700 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056d6:	f7ff faa4 	bl	8004c22 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056da:	f7fc f819 	bl	8001710 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e2:	f7fc f815 	bl	8001710 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e10d      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80056f4:	f7ff fab7 	bl	8004c66 <LL_RCC_HSI48_IsReady>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f1      	beq.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
 80056fe:	e013      	b.n	8005728 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005700:	f7ff faa0 	bl	8004c44 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc f804 	bl	8001710 <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800570c:	f7fc f800 	bl	8001710 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0f8      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800571e:	f7ff faa2 	bl	8004c66 <LL_RCC_HSI48_IsReady>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f1      	bne.n	800570c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80ee 	beq.w	800590e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005732:	f7ff fc00 	bl	8004f36 <LL_RCC_GetSysClkSource>
 8005736:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	2b02      	cmp	r3, #2
 8005746:	f040 80af 	bne.w	80058a8 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	429a      	cmp	r2, r3
 8005756:	d123      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d11c      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	0a1b      	lsrs	r3, r3, #8
 800576a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d114      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005780:	429a      	cmp	r2, r3
 8005782:	d10d      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800578e:	429a      	cmp	r2, r3
 8005790:	d106      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800579c:	429a      	cmp	r2, r3
 800579e:	d05d      	beq.n	800585c <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b0c      	cmp	r3, #12
 80057a4:	d058      	beq.n	8005858 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0ab      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057b8:	f7ff fc73 	bl	80050a2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057bc:	f7fb ffa8 	bl	8001710 <HAL_GetTick>
 80057c0:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fb ffa4 	bl	8001710 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e09c      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ef      	bne.n	80057c4 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <HAL_RCC_OscConfig+0x6e4>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057f6:	4311      	orrs	r1, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057fc:	0212      	lsls	r2, r2, #8
 80057fe:	4311      	orrs	r1, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005804:	4311      	orrs	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800580a:	4311      	orrs	r1, r2
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005810:	430a      	orrs	r2, r1
 8005812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005816:	4313      	orrs	r3, r2
 8005818:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800581a:	f7ff fc33 	bl	8005084 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800582e:	f7fb ff6f 	bl	8001710 <HAL_GetTick>
 8005832:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fb ff6b 	bl	8001710 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e063      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0ef      	beq.n	8005836 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005856:	e05a      	b.n	800590e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e059      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d151      	bne.n	800590e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800586a:	f7ff fc0b 	bl	8005084 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800587e:	f7fb ff47 	bl	8001710 <HAL_GetTick>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005886:	f7fb ff43 	bl	8001710 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e03b      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0ef      	beq.n	8005886 <HAL_RCC_OscConfig+0x686>
 80058a6:	e032      	b.n	800590e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b0c      	cmp	r3, #12
 80058ac:	d02d      	beq.n	800590a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ae:	f7ff fbf8 	bl	80050a2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80058c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058cc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80058d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fb ff1b 	bl	8001710 <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058dc:	e00d      	b.n	80058fa <HAL_RCC_OscConfig+0x6fa>
 80058de:	bf00      	nop
 80058e0:	58000400 	.word	0x58000400
 80058e4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e8:	f7fb ff12 	bl	8001710 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ef      	bne.n	80058e8 <HAL_RCC_OscConfig+0x6e8>
 8005908:	e001      	b.n	800590e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3734      	adds	r7, #52	; 0x34
 8005914:	46bd      	mov	sp, r7
 8005916:	bd90      	pop	{r4, r7, pc}

08005918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e12d      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b98      	ldr	r3, [pc, #608]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d91b      	bls.n	8005972 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b95      	ldr	r3, [pc, #596]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 0207 	bic.w	r2, r3, #7
 8005942:	4993      	ldr	r1, [pc, #588]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594a:	f7fb fee1 	bl	8001710 <HAL_GetTick>
 800594e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005950:	e008      	b.n	8005964 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005952:	f7fb fedd 	bl	8001710 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e111      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005964:	4b8a      	ldr	r3, [pc, #552]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d1ef      	bne.n	8005952 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fae3 	bl	8004f4e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005988:	f7fb fec2 	bl	8001710 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005990:	f7fb febe 	bl	8001710 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0f2      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80059a2:	f7ff fbd0 	bl	8005146 <LL_RCC_IsActiveFlag_HPRE>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f1      	beq.n	8005990 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fada 	bl	8004f76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059c2:	f7fb fea5 	bl	8001710 <HAL_GetTick>
 80059c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80059ca:	f7fb fea1 	bl	8001710 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e0d5      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80059dc:	f7ff fbc5 	bl	800516a <LL_RCC_IsActiveFlag_C2HPRE>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f1      	beq.n	80059ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fad3 	bl	8004fa2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80059fc:	f7fb fe88 	bl	8001710 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a04:	f7fb fe84 	bl	8001710 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0b8      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a16:	f7ff fbbb 	bl	8005190 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f1      	beq.n	8005a04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d016      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff facd 	bl	8004fd0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a36:	f7fb fe6b 	bl	8001710 <HAL_GetTick>
 8005a3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a3e:	f7fb fe67 	bl	8001710 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e09b      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a50:	f7ff fbb1 	bl	80051b6 <LL_RCC_IsActiveFlag_PPRE1>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f1      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d017      	beq.n	8005a96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fac3 	bl	8004ff8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a72:	f7fb fe4d 	bl	8001710 <HAL_GetTick>
 8005a76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a7a:	f7fb fe49 	bl	8001710 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e07d      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005a8c:	f7ff fba5 	bl	80051da <LL_RCC_IsActiveFlag_PPRE2>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f1      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d043      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d106      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005aaa:	f7ff f863 	bl	8004b74 <LL_RCC_HSE_IsReady>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11e      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e067      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d106      	bne.n	8005ace <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ac0:	f7ff fafe 	bl	80050c0 <LL_RCC_PLL_IsReady>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e05c      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005ad6:	f7ff f9cb 	bl	8004e70 <LL_RCC_MSI_IsReady>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d108      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e051      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ae4:	f7ff f876 	bl	8004bd4 <LL_RCC_HSI_IsReady>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e04a      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fa09 	bl	8004f0e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fb fe08 	bl	8001710 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	e00a      	b.n	8005b1a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b04:	f7fb fe04 	bl	8001710 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e036      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1a:	f7ff fa0c 	bl	8004f36 <LL_RCC_GetSysClkSource>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d1ec      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b2a:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d21b      	bcs.n	8005b70 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 0207 	bic.w	r2, r3, #7
 8005b40:	4913      	ldr	r1, [pc, #76]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b48:	f7fb fde2 	bl	8001710 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b50:	f7fb fdde 	bl	8001710 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e012      	b.n	8005b88 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b62:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d1ef      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b70:	f000 f87e 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005b74:	4603      	mov	r3, r0
 8005b76:	4a07      	ldr	r2, [pc, #28]	; (8005b94 <HAL_RCC_ClockConfig+0x27c>)
 8005b78:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005b7a:	f7fb fdd5 	bl	8001728 <HAL_GetTickPrio>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fb fd77 	bl	8001674 <HAL_InitTick>
 8005b86:	4603      	mov	r3, r0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	58004000 	.word	0x58004000
 8005b94:	20000004 	.word	0x20000004

08005b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b9e:	f7ff f9ca 	bl	8004f36 <LL_RCC_GetSysClkSource>
 8005ba2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005baa:	f7ff f986 	bl	8004eba <LL_RCC_MSI_GetRange>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e04b      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d102      	bne.n	8005bcc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005bc6:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e045      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d10a      	bne.n	8005be8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005bd2:	f7fe ff9f 	bl	8004b14 <LL_RCC_HSE_IsEnabledDiv2>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d102      	bne.n	8005be2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005bdc:	4b22      	ldr	r3, [pc, #136]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e03a      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005be2:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e037      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005be8:	f7ff faa1 	bl	800512e <LL_RCC_PLL_GetMainSource>
 8005bec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d003      	beq.n	8005bfc <HAL_RCC_GetSysClockFreq+0x64>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0x6a>
 8005bfa:	e00d      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bfe:	60bb      	str	r3, [r7, #8]
        break;
 8005c00:	e015      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c02:	f7fe ff87 	bl	8004b14 <LL_RCC_HSE_IsEnabledDiv2>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d102      	bne.n	8005c12 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c0e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005c10:	e00d      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005c12:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c14:	60bb      	str	r3, [r7, #8]
        break;
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c18:	f7ff f94f 	bl	8004eba <LL_RCC_MSI_GetRange>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	091b      	lsrs	r3, r3, #4
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2a:	60bb      	str	r3, [r7, #8]
        break;
 8005c2c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005c2e:	f7ff fa59 	bl	80050e4 <LL_RCC_PLL_GetN>
 8005c32:	4602      	mov	r2, r0
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	fb03 f402 	mul.w	r4, r3, r2
 8005c3a:	f7ff fa6c 	bl	8005116 <LL_RCC_PLL_GetDivider>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	091b      	lsrs	r3, r3, #4
 8005c42:	3301      	adds	r3, #1
 8005c44:	fbb4 f4f3 	udiv	r4, r4, r3
 8005c48:	f7ff fa59 	bl	80050fe <LL_RCC_PLL_GetR>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	0f5b      	lsrs	r3, r3, #29
 8005c50:	3301      	adds	r3, #1
 8005c52:	fbb4 f3f3 	udiv	r3, r4, r3
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005c58:	68fb      	ldr	r3, [r7, #12]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd90      	pop	{r4, r7, pc}
 8005c62:	bf00      	nop
 8005c64:	08007ab4 	.word	0x08007ab4
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	01e84800 	.word	0x01e84800

08005c70 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b598      	push	{r3, r4, r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c74:	f7ff ff90 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	f7ff f9d1 	bl	8005020 <LL_RCC_GetAHBPrescaler>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	4a03      	ldr	r2, [pc, #12]	; (8005c94 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd98      	pop	{r3, r4, r7, pc}
 8005c94:	08007a54 	.word	0x08007a54

08005c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c98:	b598      	push	{r3, r4, r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c9c:	f7ff ffe8 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	f7ff f9d7 	bl	8005054 <LL_RCC_GetAPB1Prescaler>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd98      	pop	{r3, r4, r7, pc}
 8005cc0:	08007a94 	.word	0x08007a94

08005cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc4:	b598      	push	{r3, r4, r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005cc8:	f7ff ffd2 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005ccc:	4604      	mov	r4, r0
 8005cce:	f7ff f9cd 	bl	800506c <LL_RCC_GetAPB2Prescaler>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	0adb      	lsrs	r3, r3, #11
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	4a04      	ldr	r2, [pc, #16]	; (8005cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd98      	pop	{r3, r4, r7, pc}
 8005cec:	08007a94 	.word	0x08007a94

08005cf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2bb0      	cmp	r3, #176	; 0xb0
 8005cfc:	d903      	bls.n	8005d06 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e007      	b.n	8005d16 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d14:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005d16:	f7ff f98f 	bl	8005038 <LL_RCC_GetAHB4Prescaler>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	0c9c      	lsrs	r4, r3, #18
 8005d3a:	f7fe fedd 	bl	8004af8 <HAL_PWREx_GetVoltageRange>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4619      	mov	r1, r3
 8005d42:	4620      	mov	r0, r4
 8005d44:	f000 f80c 	bl	8005d60 <RCC_SetFlashLatency>
 8005d48:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08007ab4 	.word	0x08007ab4
 8005d58:	08007a54 	.word	0x08007a54
 8005d5c:	431bde83 	.word	0x431bde83

08005d60 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b093      	sub	sp, #76	; 0x4c
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005d6a:	4b39      	ldr	r3, [pc, #228]	; (8005e50 <RCC_SetFlashLatency+0xf0>)
 8005d6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005d76:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <RCC_SetFlashLatency+0xf4>)
 8005d78:	f107 031c 	add.w	r3, r7, #28
 8005d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005d82:	4b35      	ldr	r3, [pc, #212]	; (8005e58 <RCC_SetFlashLatency+0xf8>)
 8005d84:	f107 040c 	add.w	r4, r7, #12
 8005d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005d8e:	2300      	movs	r3, #0
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d11c      	bne.n	8005dd4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d9e:	e015      	b.n	8005dcc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005da8:	4413      	add	r3, r2
 8005daa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d808      	bhi.n	8005dc6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005dc4:	e022      	b.n	8005e0c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc8:	3301      	adds	r3, #1
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d9e6      	bls.n	8005da0 <RCC_SetFlashLatency+0x40>
 8005dd2:	e01b      	b.n	8005e0c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd8:	e015      	b.n	8005e06 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005de2:	4413      	add	r3, r2
 8005de4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d808      	bhi.n	8005e00 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005df6:	4413      	add	r3, r2
 8005df8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005dfe:	e005      	b.n	8005e0c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e02:	3301      	adds	r3, #1
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d9e6      	bls.n	8005dda <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <RCC_SetFlashLatency+0xfc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f023 0207 	bic.w	r2, r3, #7
 8005e14:	4911      	ldr	r1, [pc, #68]	; (8005e5c <RCC_SetFlashLatency+0xfc>)
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e1c:	f7fb fc78 	bl	8001710 <HAL_GetTick>
 8005e20:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e22:	e008      	b.n	8005e36 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e24:	f7fb fc74 	bl	8001710 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e007      	b.n	8005e46 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <RCC_SetFlashLatency+0xfc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d1ef      	bne.n	8005e24 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	374c      	adds	r7, #76	; 0x4c
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd90      	pop	{r4, r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	080079e8 	.word	0x080079e8
 8005e54:	080079f8 	.word	0x080079f8
 8005e58:	08007a04 	.word	0x08007a04
 8005e5c:	58004000 	.word	0x58004000

08005e60 <LL_RCC_LSE_IsEnabled>:
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <LL_RCC_LSE_IsEnabled+0x18>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <LL_RCC_LSE_IsEnabled+0x1a>
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <LL_RCC_LSE_IsReady>:
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d101      	bne.n	8005e9c <LL_RCC_LSE_IsReady+0x18>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <LL_RCC_LSE_IsReady+0x1a>
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_RCC_SetRFWKPClockSource>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <LL_RCC_SetSMPSClockSource>:
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f023 0203 	bic.w	r2, r3, #3
 8005ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_RCC_SetSMPSPrescaler>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_RCC_SetUSARTClockSource>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f023 0203 	bic.w	r2, r3, #3
 8005f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_RCC_SetLPUARTClockSource>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <LL_RCC_SetI2CClockSource>:
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005f94:	43db      	mvns	r3, r3
 8005f96:	401a      	ands	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <LL_RCC_SetLPTIMClockSource>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	401a      	ands	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <LL_RCC_SetSAIClockSource>:
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <LL_RCC_SetRNGClockSource>:
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800602a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_RCC_SetCLK48ClockSource>:
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_RCC_SetUSBClockSource>:
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ffe3 	bl	8006042 <LL_RCC_SetCLK48ClockSource>
}
 800607c:	bf00      	nop
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <LL_RCC_SetADCClockSource>:
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800608c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <LL_RCC_SetRTCClockSource>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_GetRTCClockSource>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <LL_RCC_ForceBackupDomainReset>:
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800610e:	bf00      	nop
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <LL_RCC_PLLSAI1_Enable>:
{
 800613a:	b480      	push	{r7}
 800613c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800613e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800614c:	6013      	str	r3, [r2, #0]
}
 800614e:	bf00      	nop
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <LL_RCC_PLLSAI1_Disable>:
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800615c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800616a:	6013      	str	r3, [r2, #0]
}
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_RCC_PLLSAI1_IsReady>:
{
 8006176:	b480      	push	{r7}
 8006178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800617a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006188:	d101      	bne.n	800618e <LL_RCC_PLLSAI1_IsReady+0x18>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b088      	sub	sp, #32
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80061a2:	2300      	movs	r3, #0
 80061a4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80061a6:	2300      	movs	r3, #0
 80061a8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d034      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061be:	d021      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80061c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061c4:	d81b      	bhi.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061ca:	d01d      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80061cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061d0:	d815      	bhi.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x54>
 80061d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061da:	d110      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ea:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80061ec:	e00d      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f947 	bl	8006486 <RCCEx_PLLSAI1_ConfigNP>
 80061f8:	4603      	mov	r3, r0
 80061fa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061fc:	e005      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	77fb      	strb	r3, [r7, #31]
        break;
 8006202:	e002      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620a:	7ffb      	ldrb	r3, [r7, #31]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fee8 	bl	8005fea <LL_RCC_SetSAIClockSource>
 800621a:	e001      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7ffb      	ldrb	r3, [r7, #31]
 800621e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006228:	2b00      	cmp	r3, #0
 800622a:	d046      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800622c:	f7ff ff56 	bl	80060dc <LL_RCC_GetRTCClockSource>
 8006230:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	429a      	cmp	r2, r3
 800623a:	d03c      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800623c:	f7fe fbfa 	bl	8004a34 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ff30 	bl	80060b0 <LL_RCC_SetRTCClockSource>
 8006250:	e02e      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800625c:	f7ff ff4b 	bl	80060f6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006260:	f7ff ff5a 	bl	8006118 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800627c:	f7ff fdf0 	bl	8005e60 <LL_RCC_LSE_IsEnabled>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d114      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006286:	f7fb fa43 	bl	8001710 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800628c:	e00b      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fb fa3f 	bl	8001710 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d902      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	77fb      	strb	r3, [r7, #31]
              break;
 80062a4:	e004      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80062a6:	f7ff fded 	bl	8005e84 <LL_RCC_LSE_IsReady>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d1ee      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
 80062b2:	77bb      	strb	r3, [r7, #30]
 80062b4:	e001      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b6:	7ffb      	ldrb	r3, [r7, #31]
 80062b8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fe2a 	bl	8005f24 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fe35 	bl	8005f50 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fe5d 	bl	8005fb6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff fe52 	bl	8005fb6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fe2a 	bl	8005f7c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fe1f 	bl	8005f7c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d022      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fe8d 	bl	800606e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635c:	d107      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800635e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006376:	d10b      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f8dd 	bl	800653c <RCCEx_PLLSAI1_ConfigNQ>
 8006382:	4603      	mov	r3, r0
 8006384:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006386:	7ffb      	ldrb	r3, [r7, #31]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800638c:	7ffb      	ldrb	r3, [r7, #31]
 800638e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006398:	2b00      	cmp	r3, #0
 800639a:	d02b      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d008      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ae:	d003      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d105      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fe2a 	bl	8006016 <LL_RCC_SetRNGClockSource>
 80063c2:	e00a      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x240>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	2000      	movs	r0, #0
 80063d0:	f7ff fe21 	bl	8006016 <LL_RCC_SetRNGClockSource>
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fe34 	bl	8006042 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80063e2:	d107      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe3d 	bl	8006084 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006412:	d107      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800641e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006422:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800642c:	d10b      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f8dd 	bl	80065f2 <RCCEx_PLLSAI1_ConfigNR>
 8006438:	4603      	mov	r3, r0
 800643a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800643c:	7ffb      	ldrb	r3, [r7, #31]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8006442:	7ffb      	ldrb	r3, [r7, #31]
 8006444:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fd26 	bl	8005ea8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d009      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fd45 	bl	8005efc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fd2c 	bl	8005ed4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800647c:	7fbb      	ldrb	r3, [r7, #30]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006492:	f7ff fe61 	bl	8006158 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006496:	f7fb f93b 	bl	8001710 <HAL_GetTick>
 800649a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800649c:	e009      	b.n	80064b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800649e:	f7fb f937 	bl	8001710 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d902      	bls.n	80064b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	e004      	b.n	80064bc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80064b2:	f7ff fe60 	bl	8006176 <LL_RCC_PLLSAI1_IsReady>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f0      	bne.n	800649e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d137      	bne.n	8006532 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80064da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064f0:	f7ff fe23 	bl	800613a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f4:	f7fb f90c 	bl	8001710 <HAL_GetTick>
 80064f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064fa:	e009      	b.n	8006510 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064fc:	f7fb f908 	bl	8001710 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d902      	bls.n	8006510 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	73fb      	strb	r3, [r7, #15]
        break;
 800650e:	e004      	b.n	800651a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006510:	f7ff fe31 	bl	8006176 <LL_RCC_PLLSAI1_IsReady>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d1f0      	bne.n	80064fc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d108      	bne.n	8006532 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800652e:	4313      	orrs	r3, r2
 8006530:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006548:	f7ff fe06 	bl	8006158 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800654c:	f7fb f8e0 	bl	8001710 <HAL_GetTick>
 8006550:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006552:	e009      	b.n	8006568 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006554:	f7fb f8dc 	bl	8001710 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d902      	bls.n	8006568 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	73fb      	strb	r3, [r7, #15]
      break;
 8006566:	e004      	b.n	8006572 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006568:	f7ff fe05 	bl	8006176 <LL_RCC_PLLSAI1_IsReady>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1f0      	bne.n	8006554 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d137      	bne.n	80065e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800658c:	4313      	orrs	r3, r2
 800658e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a2:	4313      	orrs	r3, r2
 80065a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80065a6:	f7ff fdc8 	bl	800613a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065aa:	f7fb f8b1 	bl	8001710 <HAL_GetTick>
 80065ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065b0:	e009      	b.n	80065c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065b2:	f7fb f8ad 	bl	8001710 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d902      	bls.n	80065c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	73fb      	strb	r3, [r7, #15]
        break;
 80065c4:	e004      	b.n	80065d0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065c6:	f7ff fdd6 	bl	8006176 <LL_RCC_PLLSAI1_IsReady>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d1f0      	bne.n	80065b2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d108      	bne.n	80065e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e4:	4313      	orrs	r3, r2
 80065e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065fe:	f7ff fdab 	bl	8006158 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006602:	f7fb f885 	bl	8001710 <HAL_GetTick>
 8006606:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006608:	e009      	b.n	800661e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800660a:	f7fb f881 	bl	8001710 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d902      	bls.n	800661e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	73fb      	strb	r3, [r7, #15]
      break;
 800661c:	e004      	b.n	8006628 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800661e:	f7ff fdaa 	bl	8006176 <LL_RCC_PLLSAI1_IsReady>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f0      	bne.n	800660a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d137      	bne.n	800669e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800662e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006642:	4313      	orrs	r3, r2
 8006644:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006658:	4313      	orrs	r3, r2
 800665a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800665c:	f7ff fd6d 	bl	800613a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006660:	f7fb f856 	bl	8001710 <HAL_GetTick>
 8006664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006666:	e009      	b.n	800667c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006668:	f7fb f852 	bl	8001710 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d902      	bls.n	800667c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	73fb      	strb	r3, [r7, #15]
        break;
 800667a:	e004      	b.n	8006686 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800667c:	f7ff fd7b 	bl	8006176 <LL_RCC_PLLSAI1_IsReady>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d1f0      	bne.n	8006668 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d108      	bne.n	800669e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800668c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006690:	691a      	ldr	r2, [r3, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800669a:	4313      	orrs	r3, r2
 800669c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e027      	b.n	800670a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	7a5b      	ldrb	r3, [r3, #9]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fa fd96 	bl	80011fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f023 0120 	bic.w	r1, r3, #32
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0204 	orr.w	r2, r2, #4
 80066fa:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b20      	cmp	r3, #32
 800672a:	d105      	bne.n	8006738 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2210      	movs	r2, #16
 8006730:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8006732:	2301      	movs	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e00b      	b.n	8006750 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d104      	bne.n	8006750 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2208      	movs	r2, #8
 800674a:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 800674c:	2301      	movs	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d10a      	bne.n	800676c <HAL_RNG_IRQHandler+0x5a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2204      	movs	r2, #4
 800675a:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f839 	bl	80067d4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800676a:	605a      	str	r2, [r3, #4]
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b01      	cmp	r3, #1
 8006778:	d11d      	bne.n	80067b6 <HAL_RNG_IRQHandler+0xa4>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0208 	bic.w	r2, r2, #8
 8006788:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	7a5b      	ldrb	r3, [r3, #9]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b04      	cmp	r3, #4
 800679c:	d00b      	beq.n	80067b6 <HAL_RNG_IRQHandler+0xa4>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f804 	bl	80067be <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e095      	b.n	8006926 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d108      	bne.n	8006814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800680a:	d009      	beq.n	8006820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	61da      	str	r2, [r3, #28]
 8006812:	e005      	b.n	8006820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa fcfa 	bl	8001234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006860:	d902      	bls.n	8006868 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e002      	b.n	800686e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006876:	d007      	beq.n	8006888 <HAL_SPI_Init+0xa0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006880:	d002      	beq.n	8006888 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ca:	ea42 0103 	orr.w	r1, r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	f003 0204 	and.w	r2, r3, #4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006904:	ea42 0103 	orr.w	r1, r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	099b      	lsrs	r3, r3, #6
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10f      	bne.n	8006974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	099b      	lsrs	r3, r3, #6
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d004      	beq.n	8006974 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
    return;
 8006972:	e0d7      	b.n	8006b24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <HAL_SPI_IRQHandler+0x66>
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	09db      	lsrs	r3, r3, #7
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
    return;
 8006994:	e0c6      	b.n	8006b24 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10c      	bne.n	80069bc <HAL_SPI_IRQHandler+0x8c>
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	099b      	lsrs	r3, r3, #6
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	0a1b      	lsrs	r3, r3, #8
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80b4 	beq.w	8006b24 <HAL_SPI_IRQHandler+0x1f4>
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 80ad 	beq.w	8006b24 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	099b      	lsrs	r3, r3, #6
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d023      	beq.n	8006a1e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d011      	beq.n	8006a06 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	e00b      	b.n	8006a1e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	693b      	ldr	r3, [r7, #16]
        return;
 8006a1c:	e082      	b.n	8006b24 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d014      	beq.n	8006a54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00c      	beq.n	8006a7a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a64:	f043 0208 	orr.w	r2, r3, #8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	60bb      	str	r3, [r7, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d04f      	beq.n	8006b22 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a90:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <HAL_SPI_IRQHandler+0x17e>
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d034      	beq.n	8006b18 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0203 	bic.w	r2, r2, #3
 8006abc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d011      	beq.n	8006aea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aca:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_SPI_IRQHandler+0x1fc>)
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fd fa28 	bl	8003f28 <HAL_DMA_Abort_IT>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af6:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <HAL_SPI_IRQHandler+0x1fc>)
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fd fa12 	bl	8003f28 <HAL_DMA_Abort_IT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006b16:	e003      	b.n	8006b20 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f809 	bl	8006b30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b1e:	e000      	b.n	8006b22 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006b20:	bf00      	nop
    return;
 8006b22:	bf00      	nop
  }
}
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	08006b45 	.word	0x08006b45

08006b30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7ff ffe5 	bl	8006b30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <LL_RCC_GetUSARTClockSource>:
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4013      	ands	r3, r2
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <LL_RCC_GetLPUARTClockSource>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4013      	ands	r3, r2
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e042      	b.n	8006c46 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fa f9e2 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f9bf 	bl	8006f74 <UART_SetConfig>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e022      	b.n	8006c46 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fbbd 	bl	8007388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fc44 	bl	80074cc <UART_CheckIdleState>
 8006c44:	4603      	mov	r3, r0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c76:	4013      	ands	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d118      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d013      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8144 	beq.w	8006f30 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
      }
      return;
 8006cb0:	e13e      	b.n	8006f30 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80e8 	beq.w	8006e8a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4ba0      	ldr	r3, [pc, #640]	; (8006f40 <HAL_UART_IRQHandler+0x2f0>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4b9f      	ldr	r3, [pc, #636]	; (8006f44 <HAL_UART_IRQHandler+0x2f4>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80dd 	beq.w	8006e8a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d010      	beq.n	8006cfc <HAL_UART_IRQHandler+0xac>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	f043 0201 	orr.w	r2, r3, #1
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <HAL_UART_IRQHandler+0xd8>
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2202      	movs	r2, #2
 8006d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1e:	f043 0204 	orr.w	r2, r3, #4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d010      	beq.n	8006d54 <HAL_UART_IRQHandler+0x104>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2204      	movs	r2, #4
 8006d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	f043 0202 	orr.w	r2, r3, #2
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d015      	beq.n	8006d8a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4b75      	ldr	r3, [pc, #468]	; (8006f40 <HAL_UART_IRQHandler+0x2f0>)
 8006d6c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2208      	movs	r2, #8
 8006d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d80:	f043 0208 	orr.w	r2, r3, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d011      	beq.n	8006db8 <HAL_UART_IRQHandler+0x168>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dae:	f043 0220 	orr.w	r2, r3, #32
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80b8 	beq.w	8006f34 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d004      	beq.n	8006e12 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d031      	beq.n	8006e76 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fc22 	bl	800765c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d123      	bne.n	8006e6e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e34:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d013      	beq.n	8006e66 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e42:	4a41      	ldr	r2, [pc, #260]	; (8006f48 <HAL_UART_IRQHandler+0x2f8>)
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fd f86c 	bl	8003f28 <HAL_DMA_Abort_IT>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d017      	beq.n	8006e86 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e64:	e00f      	b.n	8006e86 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f87a 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	e00b      	b.n	8006e86 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f876 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e74:	e007      	b.n	8006e86 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f872 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006e84:	e056      	b.n	8006f34 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e86:	bf00      	nop
    return;
 8006e88:	e054      	b.n	8006f34 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00d      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x260>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc2a 	bl	8007702 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eae:	e044      	b.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d012      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d030      	beq.n	8006f38 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
    }
    return;
 8006ede:	e02b      	b.n	8006f38 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d008      	beq.n	8006efc <HAL_UART_IRQHandler+0x2ac>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fbea 	bl	80076ce <UART_EndTransmit_IT>
    return;
 8006efa:	e01e      	b.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_UART_IRQHandler+0x2c8>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc0a 	bl	800772a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f16:	e010      	b.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da08      	bge.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fbf4 	bl	8007716 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f2e:	e004      	b.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
      return;
 8006f30:	bf00      	nop
 8006f32:	e002      	b.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
    return;
 8006f34:	bf00      	nop
 8006f36:	e000      	b.n	8006f3a <HAL_UART_IRQHandler+0x2ea>
    return;
 8006f38:	bf00      	nop
  }
}
 8006f3a:	3720      	adds	r7, #32
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	10000001 	.word	0x10000001
 8006f44:	04000120 	.word	0x04000120
 8006f48:	080076a3 	.word	0x080076a3

08006f4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f74:	b5b0      	push	{r4, r5, r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4ba2      	ldr	r3, [pc, #648]	; (8007234 <UART_SetConfig+0x2c0>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a98      	ldr	r2, [pc, #608]	; (8007238 <UART_SetConfig+0x2c4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d004      	beq.n	8006fe6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ff0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6812      	ldr	r2, [r2, #0]
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	f023 010f 	bic.w	r1, r3, #15
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a88      	ldr	r2, [pc, #544]	; (800723c <UART_SetConfig+0x2c8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d11f      	bne.n	800705e <UART_SetConfig+0xea>
 800701e:	2003      	movs	r0, #3
 8007020:	f7ff fda5 	bl	8006b6e <LL_RCC_GetUSARTClockSource>
 8007024:	4603      	mov	r3, r0
 8007026:	2b03      	cmp	r3, #3
 8007028:	d816      	bhi.n	8007058 <UART_SetConfig+0xe4>
 800702a:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <UART_SetConfig+0xbc>)
 800702c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007030:	08007041 	.word	0x08007041
 8007034:	0800704d 	.word	0x0800704d
 8007038:	08007047 	.word	0x08007047
 800703c:	08007053 	.word	0x08007053
 8007040:	2301      	movs	r3, #1
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	e038      	b.n	80070b8 <UART_SetConfig+0x144>
 8007046:	2302      	movs	r3, #2
 8007048:	76fb      	strb	r3, [r7, #27]
 800704a:	e035      	b.n	80070b8 <UART_SetConfig+0x144>
 800704c:	2304      	movs	r3, #4
 800704e:	76fb      	strb	r3, [r7, #27]
 8007050:	e032      	b.n	80070b8 <UART_SetConfig+0x144>
 8007052:	2308      	movs	r3, #8
 8007054:	76fb      	strb	r3, [r7, #27]
 8007056:	e02f      	b.n	80070b8 <UART_SetConfig+0x144>
 8007058:	2310      	movs	r3, #16
 800705a:	76fb      	strb	r3, [r7, #27]
 800705c:	e02c      	b.n	80070b8 <UART_SetConfig+0x144>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a75      	ldr	r2, [pc, #468]	; (8007238 <UART_SetConfig+0x2c4>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d125      	bne.n	80070b4 <UART_SetConfig+0x140>
 8007068:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800706c:	f7ff fd8f 	bl	8006b8e <LL_RCC_GetLPUARTClockSource>
 8007070:	4603      	mov	r3, r0
 8007072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007076:	d017      	beq.n	80070a8 <UART_SetConfig+0x134>
 8007078:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800707c:	d817      	bhi.n	80070ae <UART_SetConfig+0x13a>
 800707e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007082:	d00b      	beq.n	800709c <UART_SetConfig+0x128>
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007088:	d811      	bhi.n	80070ae <UART_SetConfig+0x13a>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <UART_SetConfig+0x122>
 800708e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007092:	d006      	beq.n	80070a2 <UART_SetConfig+0x12e>
 8007094:	e00b      	b.n	80070ae <UART_SetConfig+0x13a>
 8007096:	2300      	movs	r3, #0
 8007098:	76fb      	strb	r3, [r7, #27]
 800709a:	e00d      	b.n	80070b8 <UART_SetConfig+0x144>
 800709c:	2302      	movs	r3, #2
 800709e:	76fb      	strb	r3, [r7, #27]
 80070a0:	e00a      	b.n	80070b8 <UART_SetConfig+0x144>
 80070a2:	2304      	movs	r3, #4
 80070a4:	76fb      	strb	r3, [r7, #27]
 80070a6:	e007      	b.n	80070b8 <UART_SetConfig+0x144>
 80070a8:	2308      	movs	r3, #8
 80070aa:	76fb      	strb	r3, [r7, #27]
 80070ac:	e004      	b.n	80070b8 <UART_SetConfig+0x144>
 80070ae:	2310      	movs	r3, #16
 80070b0:	76fb      	strb	r3, [r7, #27]
 80070b2:	e001      	b.n	80070b8 <UART_SetConfig+0x144>
 80070b4:	2310      	movs	r3, #16
 80070b6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a5e      	ldr	r2, [pc, #376]	; (8007238 <UART_SetConfig+0x2c4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f040 808b 	bne.w	80071da <UART_SetConfig+0x266>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c4:	7efb      	ldrb	r3, [r7, #27]
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d823      	bhi.n	8007112 <UART_SetConfig+0x19e>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x15c>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	08007113 	.word	0x08007113
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007113 	.word	0x08007113
 80070e0:	08007103 	.word	0x08007103
 80070e4:	08007113 	.word	0x08007113
 80070e8:	08007113 	.word	0x08007113
 80070ec:	08007113 	.word	0x08007113
 80070f0:	0800710b 	.word	0x0800710b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fe fdd0 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 80070f8:	6178      	str	r0, [r7, #20]
        break;
 80070fa:	e00f      	b.n	800711c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070fc:	4b50      	ldr	r3, [pc, #320]	; (8007240 <UART_SetConfig+0x2cc>)
 80070fe:	617b      	str	r3, [r7, #20]
        break;
 8007100:	e00c      	b.n	800711c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007102:	f7fe fd49 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8007106:	6178      	str	r0, [r7, #20]
        break;
 8007108:	e008      	b.n	800711c <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800710a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800710e:	617b      	str	r3, [r7, #20]
        break;
 8007110:	e004      	b.n	800711c <UART_SetConfig+0x1a8>
      default:
        pclk = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	76bb      	strb	r3, [r7, #26]
        break;
 800711a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 811a 	beq.w	8007358 <UART_SetConfig+0x3e4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	4a46      	ldr	r2, [pc, #280]	; (8007244 <UART_SetConfig+0x2d0>)
 800712a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800712e:	461a      	mov	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	fbb3 f3f2 	udiv	r3, r3, r2
 8007136:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	4413      	add	r3, r2
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	d305      	bcc.n	8007154 <UART_SetConfig+0x1e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	429a      	cmp	r2, r3
 8007152:	d902      	bls.n	800715a <UART_SetConfig+0x1e6>
      {
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	76bb      	strb	r3, [r7, #26]
 8007158:	e0fe      	b.n	8007358 <UART_SetConfig+0x3e4>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	4618      	mov	r0, r3
 800715e:	f04f 0100 	mov.w	r1, #0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	4a37      	ldr	r2, [pc, #220]	; (8007244 <UART_SetConfig+0x2d0>)
 8007168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716c:	b29a      	uxth	r2, r3
 800716e:	f04f 0300 	mov.w	r3, #0
 8007172:	f7f9 f803 	bl	800017c <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4610      	mov	r0, r2
 800717c:	4619      	mov	r1, r3
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	f04f 0300 	mov.w	r3, #0
 8007186:	020b      	lsls	r3, r1, #8
 8007188:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800718c:	0202      	lsls	r2, r0, #8
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	6849      	ldr	r1, [r1, #4]
 8007192:	0849      	lsrs	r1, r1, #1
 8007194:	4608      	mov	r0, r1
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	1814      	adds	r4, r2, r0
 800719c:	eb43 0501 	adc.w	r5, r3, r1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	461a      	mov	r2, r3
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	4620      	mov	r0, r4
 80071ac:	4629      	mov	r1, r5
 80071ae:	f7f8 ffe5 	bl	800017c <__aeabi_uldivmod>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4613      	mov	r3, r2
 80071b8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c0:	d308      	bcc.n	80071d4 <UART_SetConfig+0x260>
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c8:	d204      	bcs.n	80071d4 <UART_SetConfig+0x260>
        {
          huart->Instance->BRR = usartdiv;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	60da      	str	r2, [r3, #12]
 80071d2:	e0c1      	b.n	8007358 <UART_SetConfig+0x3e4>
        }
        else
        {
          ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	76bb      	strb	r3, [r7, #26]
 80071d8:	e0be      	b.n	8007358 <UART_SetConfig+0x3e4>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e2:	d16a      	bne.n	80072ba <UART_SetConfig+0x346>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80071e4:	7efb      	ldrb	r3, [r7, #27]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	d82d      	bhi.n	8007248 <UART_SetConfig+0x2d4>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x280>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007215 	.word	0x08007215
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007249 	.word	0x08007249
 8007200:	08007223 	.word	0x08007223
 8007204:	08007249 	.word	0x08007249
 8007208:	08007249 	.word	0x08007249
 800720c:	08007249 	.word	0x08007249
 8007210:	0800722b 	.word	0x0800722b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007214:	f7fe fd56 	bl	8005cc4 <HAL_RCC_GetPCLK2Freq>
 8007218:	6178      	str	r0, [r7, #20]
        break;
 800721a:	e01a      	b.n	8007252 <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800721c:	4b08      	ldr	r3, [pc, #32]	; (8007240 <UART_SetConfig+0x2cc>)
 800721e:	617b      	str	r3, [r7, #20]
        break;
 8007220:	e017      	b.n	8007252 <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007222:	f7fe fcb9 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8007226:	6178      	str	r0, [r7, #20]
        break;
 8007228:	e013      	b.n	8007252 <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800722a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722e:	617b      	str	r3, [r7, #20]
        break;
 8007230:	e00f      	b.n	8007252 <UART_SetConfig+0x2de>
 8007232:	bf00      	nop
 8007234:	cfff69f3 	.word	0xcfff69f3
 8007238:	40008000 	.word	0x40008000
 800723c:	40013800 	.word	0x40013800
 8007240:	00f42400 	.word	0x00f42400
 8007244:	08007af4 	.word	0x08007af4
      default:
        pclk = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	76bb      	strb	r3, [r7, #26]
        break;
 8007250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d07f      	beq.n	8007358 <UART_SetConfig+0x3e4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	4a48      	ldr	r2, [pc, #288]	; (8007380 <UART_SetConfig+0x40c>)
 800725e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007262:	461a      	mov	r2, r3
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	fbb3 f3f2 	udiv	r3, r3, r2
 800726a:	005a      	lsls	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	441a      	add	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	b29b      	uxth	r3, r3
 800727e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b0f      	cmp	r3, #15
 8007284:	d916      	bls.n	80072b4 <UART_SetConfig+0x340>
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728c:	d212      	bcs.n	80072b4 <UART_SetConfig+0x340>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f023 030f 	bic.w	r3, r3, #15
 8007296:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	b29b      	uxth	r3, r3
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	89fb      	ldrh	r3, [r7, #14]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	89fa      	ldrh	r2, [r7, #14]
 80072b0:	60da      	str	r2, [r3, #12]
 80072b2:	e051      	b.n	8007358 <UART_SetConfig+0x3e4>
      }
      else
      {
        ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	76bb      	strb	r3, [r7, #26]
 80072b8:	e04e      	b.n	8007358 <UART_SetConfig+0x3e4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ba:	7efb      	ldrb	r3, [r7, #27]
 80072bc:	3b01      	subs	r3, #1
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d821      	bhi.n	8007306 <UART_SetConfig+0x392>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <UART_SetConfig+0x354>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072e9 	.word	0x080072e9
 80072cc:	080072f1 	.word	0x080072f1
 80072d0:	08007307 	.word	0x08007307
 80072d4:	080072f7 	.word	0x080072f7
 80072d8:	08007307 	.word	0x08007307
 80072dc:	08007307 	.word	0x08007307
 80072e0:	08007307 	.word	0x08007307
 80072e4:	080072ff 	.word	0x080072ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e8:	f7fe fcec 	bl	8005cc4 <HAL_RCC_GetPCLK2Freq>
 80072ec:	6178      	str	r0, [r7, #20]
        break;
 80072ee:	e00f      	b.n	8007310 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f0:	4b24      	ldr	r3, [pc, #144]	; (8007384 <UART_SetConfig+0x410>)
 80072f2:	617b      	str	r3, [r7, #20]
        break;
 80072f4:	e00c      	b.n	8007310 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f6:	f7fe fc4f 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 80072fa:	6178      	str	r0, [r7, #20]
        break;
 80072fc:	e008      	b.n	8007310 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007302:	617b      	str	r3, [r7, #20]
        break;
 8007304:	e004      	b.n	8007310 <UART_SetConfig+0x39c>
      default:
        pclk = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	76bb      	strb	r3, [r7, #26]
        break;
 800730e:	bf00      	nop
    }

    if (pclk != 0U)
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d020      	beq.n	8007358 <UART_SetConfig+0x3e4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	4a19      	ldr	r2, [pc, #100]	; (8007380 <UART_SetConfig+0x40c>)
 800731c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007320:	461a      	mov	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	fbb3 f2f2 	udiv	r2, r3, r2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	441a      	add	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	b29b      	uxth	r3, r3
 800733a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	d908      	bls.n	8007354 <UART_SetConfig+0x3e0>
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	d204      	bcs.n	8007354 <UART_SetConfig+0x3e0>
      {
        huart->Instance->BRR = usartdiv;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	e001      	b.n	8007358 <UART_SetConfig+0x3e4>
      }
      else
      {
        ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007374:	7ebb      	ldrb	r3, [r7, #26]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bdb0      	pop	{r4, r5, r7, pc}
 800737e:	bf00      	nop
 8007380:	08007af4 	.word	0x08007af4
 8007384:	00f42400 	.word	0x00f42400

08007388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01a      	beq.n	800749e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007486:	d10a      	bne.n	800749e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	605a      	str	r2, [r3, #4]
  }
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80074dc:	f7fa f918 	bl	8001710 <HAL_GetTick>
 80074e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d10e      	bne.n	800750e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f82c 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e022      	b.n	8007554 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b04      	cmp	r3, #4
 800751a:	d10e      	bne.n	800753a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800751c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f816 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e00c      	b.n	8007554 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	4613      	mov	r3, r2
 800756a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800756c:	e062      	b.n	8007634 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d05e      	beq.n	8007634 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007576:	f7fa f8cb 	bl	8001710 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	429a      	cmp	r2, r3
 8007584:	d302      	bcc.n	800758c <UART_WaitOnFlagUntilTimeout+0x30>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d11d      	bne.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800759a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0201 	bic.w	r2, r2, #1
 80075aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e045      	b.n	8007654 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d02e      	beq.n	8007634 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e4:	d126      	bne.n	8007634 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ee:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0201 	bic.w	r2, r2, #1
 800760e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2220      	movs	r2, #32
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e00f      	b.n	8007654 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4013      	ands	r3, r2
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	bf0c      	ite	eq
 8007644:	2301      	moveq	r3, #1
 8007646:	2300      	movne	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	429a      	cmp	r2, r3
 8007650:	d08d      	beq.n	800756e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007672:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff fc4d 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c6:	bf00      	nop
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076e4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff fc29 	bl	8006f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_UARTEx_DisableFifoMode+0x16>
 8007750:	2302      	movs	r3, #2
 8007752:	e027      	b.n	80077a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	; 0x24
 8007760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007782:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e02d      	b.n	8007824 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2224      	movs	r2, #36	; 0x24
 80077d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f84f 	bl	80078a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007840:	2302      	movs	r3, #2
 8007842:	e02d      	b.n	80078a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	; 0x24
 8007850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0201 	bic.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f811 	bl	80078a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	; 0x24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80078b0:	4a2f      	ldr	r2, [pc, #188]	; (8007970 <UARTEx_SetNbDataToProcess+0xc8>)
 80078b2:	f107 0314 	add.w	r3, r7, #20
 80078b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80078be:	4a2d      	ldr	r2, [pc, #180]	; (8007974 <UARTEx_SetNbDataToProcess+0xcc>)
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80078c8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078e4:	e03d      	b.n	8007962 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078e6:	2308      	movs	r3, #8
 80078e8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ea:	2308      	movs	r3, #8
 80078ec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	0e5b      	lsrs	r3, r3, #25
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	0f5b      	lsrs	r3, r3, #29
 8007906:	b2db      	uxtb	r3, r3
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800790e:	7fbb      	ldrb	r3, [r7, #30]
 8007910:	7f3a      	ldrb	r2, [r7, #28]
 8007912:	f107 0120 	add.w	r1, r7, #32
 8007916:	440a      	add	r2, r1
 8007918:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800791c:	fb02 f303 	mul.w	r3, r2, r3
 8007920:	7f3a      	ldrb	r2, [r7, #28]
 8007922:	f107 0120 	add.w	r1, r7, #32
 8007926:	440a      	add	r2, r1
 8007928:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800792c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007938:	7ffb      	ldrb	r3, [r7, #31]
 800793a:	7f7a      	ldrb	r2, [r7, #29]
 800793c:	f107 0120 	add.w	r1, r7, #32
 8007940:	440a      	add	r2, r1
 8007942:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	7f7a      	ldrb	r2, [r7, #29]
 800794c:	f107 0120 	add.w	r1, r7, #32
 8007950:	440a      	add	r2, r1
 8007952:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007956:	fb93 f3f2 	sdiv	r3, r3, r2
 800795a:	b29a      	uxth	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007962:	bf00      	nop
 8007964:	3724      	adds	r7, #36	; 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	08007a14 	.word	0x08007a14
 8007974:	08007a1c 	.word	0x08007a1c

08007978 <__libc_init_array>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4d0d      	ldr	r5, [pc, #52]	; (80079b0 <__libc_init_array+0x38>)
 800797c:	4c0d      	ldr	r4, [pc, #52]	; (80079b4 <__libc_init_array+0x3c>)
 800797e:	1b64      	subs	r4, r4, r5
 8007980:	10a4      	asrs	r4, r4, #2
 8007982:	2600      	movs	r6, #0
 8007984:	42a6      	cmp	r6, r4
 8007986:	d109      	bne.n	800799c <__libc_init_array+0x24>
 8007988:	4d0b      	ldr	r5, [pc, #44]	; (80079b8 <__libc_init_array+0x40>)
 800798a:	4c0c      	ldr	r4, [pc, #48]	; (80079bc <__libc_init_array+0x44>)
 800798c:	f000 f820 	bl	80079d0 <_init>
 8007990:	1b64      	subs	r4, r4, r5
 8007992:	10a4      	asrs	r4, r4, #2
 8007994:	2600      	movs	r6, #0
 8007996:	42a6      	cmp	r6, r4
 8007998:	d105      	bne.n	80079a6 <__libc_init_array+0x2e>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a0:	4798      	blx	r3
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7ee      	b.n	8007984 <__libc_init_array+0xc>
 80079a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079aa:	4798      	blx	r3
 80079ac:	3601      	adds	r6, #1
 80079ae:	e7f2      	b.n	8007996 <__libc_init_array+0x1e>
 80079b0:	08007b14 	.word	0x08007b14
 80079b4:	08007b14 	.word	0x08007b14
 80079b8:	08007b14 	.word	0x08007b14
 80079bc:	08007b18 	.word	0x08007b18

080079c0 <memset>:
 80079c0:	4402      	add	r2, r0
 80079c2:	4603      	mov	r3, r0
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d100      	bne.n	80079ca <memset+0xa>
 80079c8:	4770      	bx	lr
 80079ca:	f803 1b01 	strb.w	r1, [r3], #1
 80079ce:	e7f9      	b.n	80079c4 <memset+0x4>

080079d0 <_init>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr

080079dc <_fini>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	bf00      	nop
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr
